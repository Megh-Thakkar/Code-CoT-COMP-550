{"0": "function has_close_elements(input_list, threshold):\n    # Create an empty collection to keep track of numbers we've seen\n    create an empty collection named \"seen_numbers\"\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Check if we've come across this number before\n        if number is already in \"seen_numbers\":\n            # If we have, this is the first repeated number, so return True\n            return True\n        else:\n            # If it's a new number, add it to our collection to remember it\n            add number to \"seen_numbers\"\n\n        # Check if any of the seen numbers are within the threshold of the current number\n        for each seen_number in \"seen_numbers\":\n            if abs(number - seen_number) < threshold:\n                # If so, this is the first pair of numbers closer than the threshold, so return True\n                return True\n\n    # If we've checked all numbers and found no pairs closer than the threshold, return False\n    return False", "1": "function separate_parentheses_groups(input_string):\n    # Create an empty list to store the separate groups\n    create an empty list named \"separate_groups\"\n\n    # Initialize a variable to keep track of the current group\n    create a variable named \"current_group\" and set it to an empty string\n\n    # Initialize a variable to keep track of the number of open parentheses\n    create a variable named \"open_parentheses\" and set it to 0\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # Ignore spaces\n        if character is a space:\n            continue\n\n        # If the character is an open parenthesis\n        if character is \"(\":\n            # Increment the count of open parentheses\n            increment \"open_parentheses\" by 1\n            # Add the character to the current group\n            add character to \"current_group\"\n\n        # If the character is a close parenthesis\n        if character is \")\":\n            # Decrement the count of open parentheses\n            decrement \"open_parentheses\" by 1\n            # Add the character to the current group\n            add character to \"current_group\"\n\n        # If there are no more open parentheses\n        if \"open_parentheses\" is 0:\n            # Add the current group to the list of separate groups\n            add \"current_group\" to \"separate_groups\"\n            # Reset the current group\n            set \"current_group\" to an empty string\n\n    # Return the list of separate groups\n    return \"separate_groups\"", "2": "function truncate_number(input_number):\n    # Check if the input number is positive\n    if input_number is less than 0:\n        # If not, return an error message\n        return \"Error: Input number must be positive\"\n\n    # Convert the input number to a string\n    convert input_number to a string and store it in \"number_string\"\n\n    # Find the index of the decimal point in the string\n    find the index of \".\" in \"number_string\" and store it in \"decimal_index\"\n\n    # If there is no decimal point, return 0\n    if \"decimal_index\" is -1:\n        return 0\n\n    # Remove the decimal part from the string\n    remove all characters from \"number_string\" starting from \"decimal_index\" to the end\n\n    # Convert the remaining string back to a float\n    convert \"number_string\" back to a float and store it in \"truncated_number\"\n\n    # Return the truncated number\n    return \"truncated_number\"", "3": "function check_balance_below_zero(operations: List[int]):\n    # Initialize the balance to zero\n    balance = 0\n\n    # Loop through each operation in the list\n    for each operation in operations:\n        # Add the operation to the balance\n        balance = balance + operation\n\n        # Check if the balance is below zero\n        if balance < 0:\n            # If it is, return True\n            return True\n\n    # If we've checked all operations and found no balance below zero, return False\n    return False", "4": "function calculate_mean_absolute_deviation(input_list):\n    # Calculate the mean of the input list\n    calculate the sum of all numbers in input_list\n    divide the sum by the count of numbers in input_list\n    this gives us the mean\n\n    # Initialize a variable to keep track of the sum of absolute deviations\n    set a variable named \"sum_of_absolute_deviations\" to 0\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Calculate the absolute deviation from the mean\n        subtract the mean from the number\n        take the absolute value of the result\n\n        # Add this deviation to the sum of absolute deviations\n        add the result to \"sum_of_absolute_deviations\"\n\n    # Calculate the mean absolute deviation\n    divide \"sum_of_absolute_deviations\" by the count of numbers in input_list\n\n    # Return the mean absolute deviation\n    return the result", "5": "function intersperse(input_list, delimiter):\n    # Create an empty list to store the result\n    create an empty list named \"result\"\n\n    # Loop through each element in the input list\n    for each element in input_list:\n        # Add the element to the result list\n        add element to \"result\"\n\n        # If this isn't the last element, add the delimiter\n        if this is not the last element in input_list:\n            add delimiter to \"result\"\n\n    # Return the result list\n    return \"result\"", "6": "function parse_nested_parens(input_string):\n    # Create an empty list to store the results\n    create an empty list named \"results\"\n\n    # Split the input string into groups of parentheses\n    split input_string into groups separated by spaces\n\n    # Loop through each group of parentheses\n    for each group in groups:\n        # Initialize a counter for the current group\n        set a counter to 0\n\n        # Loop through each character in the group\n        for each character in group:\n            # If the character is an opening parenthesis, increment the counter\n            if character is \"(\":\n                increment the counter\n            # If the character is a closing parenthesis, decrement the counter\n            else if character is \")\":\n                decrement the counter\n\n            # If the counter is 0, this is the deepest level of nesting\n            if counter is 0:\n                add the current level of nesting to \"results\"\n\n    # Return the list of results\n    return results", "7": "function filter_strings_by_substring(input_strings, substring):\n    # Create an empty list to store the filtered strings\n    create an empty list named \"filtered_strings\"\n\n    # Loop through each string in the input list\n    for each string in input_strings:\n        # Check if the string contains the substring\n        if substring is in string:\n            # If it does, add it to the list of filtered strings\n            add string to \"filtered_strings\"\n\n    # Return the list of filtered strings\n    return \"filtered_strings\"", "8": "function sum_product(input_list):\n    # Initialize sum and product to 0 and 1 respectively\n    initialize sum to 0\n    initialize product to 1\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Add the number to the sum\n        add number to sum\n\n        # Multiply the product by the number\n        multiply product by number\n\n    # Return the sum and product as a tuple\n    return (sum, product)", "9": "function rolling_max(input_list):\n    # Create an empty list to store the rolling maximums\n    create an empty list named \"rolling_max_list\"\n\n    # Initialize the maximum number as the first number in the list\n    set the first number in input_list as the maximum number\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # If the current number is greater than the maximum number, update the maximum number\n        if number is greater than maximum number:\n            update the maximum number as number\n\n        # Add the maximum number to the rolling_max_list\n        add maximum number to rolling_max_list\n\n    # Return the rolling_max_list\n    return rolling_max_list", "10": "function is_palindrome(input_string):\n    # Check if the input string is equal to its reverse\n    if input_string is equal to its reverse:\n        return True\n    else:\n        return False\n\nfunction make_palindrome(input_string):\n    # Initialize an empty string to store the result\n    let result be an empty string\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # Add the character to the result string\n        add character to result\n\n        # Check if the result string is a palindrome\n        if result is a palindrome:\n            # If it is, return the result string\n            return result\n\n    # If the input string is not a palindrome, return an empty string\n    return an empty string", "11": "function string_xor(input_string_a, input_string_b):\n    # Initialize an empty string to store the result\n    create an empty string named \"result\"\n\n    # Loop through each character in the input strings\n    for each character in input_string_a and input_string_b:\n        # If the characters are the same, append a '0' to the result\n        if character in input_string_a and character in input_string_b:\n            append '0' to \"result\"\n        # If the characters are different, append a '1' to the result\n        else:\n            append '1' to \"result\"\n\n    # Return the result\n    return \"result\"\n\n# Test the function\nprint(string_xor('010', '110'))  # Output: '100'", "12": "function find_longest_string(input_list):\n    # Initialize a variable to store the longest string\n    longest_string = None\n\n    # Loop through each string in the input list\n    for each string in input_list:\n        # Check if the current string is longer than the longest one we've seen so far\n        if the length of string is greater than the length of longest_string:\n            # If it is, update the longest_string\n            longest_string = string\n\n    # Return the longest string\n    return longest_string", "13": "function greatest_common_divisor(a: int, b: int) -> int:\n    # Create a variable to store the greatest common divisor\n    create a variable named \"gcd\" and initialize it to 1\n\n    # Loop from 1 to the smaller of a and b\n    for each number from 1 to the smaller of a and b:\n        # Check if the current number divides both a and b\n        if a mod number is 0 and b mod number is 0:\n            # If it does, update the greatest common divisor\n            update \"gcd\" to number\n\n    # Return the greatest common divisor\n    return gcd", "14": "function generate_all_prefixes(input_string):\n    # Create an empty list to store all prefixes\n    create an empty list named \"prefixes\"\n\n    # Loop through each character in the input string\n    for each index from 0 to length of input_string:\n        # Extract a prefix from the input string\n        extract a substring from input_string from index 0 to current index\n        add this substring to \"prefixes\"\n\n    # Return the list of all prefixes\n    return \"prefixes\"", "15": "function string_sequence(n: int) -> str:\n    # Create an empty string to store the sequence\n    create an empty string named \"sequence\"\n\n    # Loop from 0 to n inclusive\n    for i from 0 to n:\n        # Convert the current number to a string and add it to the sequence\n        convert i to a string and add it to \"sequence\"\n\n        # If this isn't the last number in the sequence, add a space\n        if i is not n:\n            add a space to \"sequence\"\n\n    # Return the sequence\n    return sequence", "16": "function count_distinct_characters(input_string):\n    # Create an empty collection to keep track of distinct characters\n    create an empty collection named \"distinct_characters\"\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # Convert the character to lowercase to ensure case-insensitivity\n        convert character to lowercase\n\n        # Check if we've come across this character before\n        if character is already in \"distinct_characters\":\n            # If it's a new character, add it to our collection to remember it\n            add character to \"distinct_characters\"\n\n    # Return the size of the collection, which represents the number of distinct characters\n    return the size of \"distinct_characters\"", "17": "function parse_music(music_string):\n    # Create an empty list to store the duration of each note\n    create an empty list named \"note_durations\"\n\n    # Split the music string into individual notes\n    split music_string into individual_notes\n\n    # Loop through each note in the music string\n    for each note in individual_notes:\n        # Check the type of the note\n        if note is 'o':\n            # If it's a whole note, add 4 to the list of note durations\n            add 4 to note_durations\n        elif note is 'o|':\n            # If it's a half note, add 2 to the list of note durations\n            add 2 to note_durations\n        elif note is '.|':\n            # If it's a quater note, add 1 to the list of note durations\n            add 1 to note_durations\n\n    # Return the list of note durations\n    return note_durations", "18": "function count_substring_occurrences(original_string, substring):\n    # Initialize a counter to keep track of the number of times the substring appears\n    initialize a variable named \"count\" to 0\n\n    # Initialize a variable to keep track of the current position in the original string\n    initialize a variable named \"current_position\" to 0\n\n    # Loop through the original string\n    while current_position is less than the length of original_string:\n        # Check if the substring starts at the current position in the original string\n        if the substring starts at position current_position in original_string:\n            # If it does, increment the count and move the current position ahead by the length of the substring\n            increment count by 1\n            increment current_position by the length of the substring\n        else:\n            # If it doesn't, move the current position ahead by 1\n            increment current_position by 1\n\n    # Return the count\n    return count", "19": "function sort_numbers(input_string):\n    # Create a dictionary to map the string numbers to their corresponding integer values\n    create a dictionary named \"number_map\" with keys \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\" and values 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n\n    # Split the input string into a list of words\n    split input_string into a list named \"words\" using \" \" as the delimiter\n\n    # Convert each word in the list to its corresponding integer value\n    for each word in \"words\":\n        replace word with the value of word in \"number_map\"\n\n    # Sort the list of integers\n    sort the list \"words\"\n\n    # Convert each integer in the list back to its corresponding string value\n    for each integer in \"words\":\n        replace integer with the key of integer in \"number_map\"\n\n    # Join the list of words back into a string\n    join the list \"words\" into a string named \"sorted_string\" using \" \" as the delimiter\n\n    # Return the sorted string\n    return \"sorted_string\"", "20": "function find_closest_elements(input_list):\n    # Sort the input list in ascending order\n    sort input_list in ascending order\n\n    # Initialize variables to store the closest pair of numbers and their difference\n    set closest_pair to (input_list[0], input_list[1])\n    set smallest_difference to the absolute difference between input_list[0] and input_list[1]\n\n    # Loop through the sorted list, comparing each pair of numbers\n    for each index from 1 to the length of input_list - 1:\n        # Calculate the difference between the current pair of numbers\n        set current_difference to the absolute difference between input_list[index] and input_list[index - 1]\n\n        # If the current difference is smaller than the smallest difference found so far,\n        # update the closest pair and the smallest difference\n        if current_difference is less than smallest_difference:\n            set closest_pair to (input_list[index - 1], input_list[index])\n            set smallest_difference to current_difference\n\n    # Return the closest pair of numbers\n    return closest_pair", "21": "function rescale_to_unit(input_list):\n    # Find the minimum and maximum values in the input list\n    min_value = find_minimum_value(input_list)\n    max_value = find_maximum_value(input_list)\n\n    # Create an empty list to store the rescaled values\n    rescaled_values = []\n\n    # Loop through each value in the input list\n    for each value in input_list:\n        # Rescale the value to be between 0 and 1\n        rescaled_value = (value - min_value) / (max_value - min_value)\n        # Add the rescaled value to the list\n        add rescaled_value to rescaled_values\n\n    # Return the list of rescaled values\n    return rescaled_values\n\nfunction find_minimum_value(input_list):\n    # Assume the first value is the smallest\n    min_value = input_list[0]\n\n    # Loop through each value in the input list\n    for each value in input_list:\n        # If this value is smaller than the current smallest, it's the new smallest\n        if value < min_value:\n            min_value = value\n\n    # Return the smallest value\n    return min_value\n\nfunction find_maximum_value(input_list):\n    # Assume the first value is the largest\n    max_value = input_list[0]\n\n    # Loop through each value in the input list\n    for each value in input_list:\n        # If this value is larger than the current largest, it's the new largest\n        if value > max_value:\n            max_value = value\n\n    # Return the largest value\n    return max_value", "22": "function filter_integers(input_list):\n    # Create an empty list to store the integers\n    create an empty list named \"integer_list\"\n\n    # Loop through each item in the input list\n    for each item in input_list:\n        # Check if the item is an integer\n        if item is an integer:\n            # If it is, add it to the integer list\n            add item to \"integer_list\"\n\n    # Return the list of integers\n    return \"integer_list\"", "23": "function get_string_length(input_string):\n    # Initialize a counter to keep track of the length of the string\n    initialize a counter named \"length\" to 0\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # Increment the length counter\n        increment \"length\" by 1\n\n    # Return the final length of the string\n    return \"length\"", "24": "function find_largest_divisor(n):\n    # Start from the largest possible divisor, which is n-1\n    set divisor to n - 1\n\n    # Loop until we find a divisor\n    while divisor > 1:\n        # Check if n is divisible by the current divisor\n        if n is divisible by divisor:\n            # If it is, return the divisor\n            return divisor\n        else:\n            # If it's not, try the next smaller divisor\n            decrement divisor by 1\n\n    # If we've checked all possible divisors and found no divisors, return a signal (like None or a message)\n    return None", "25": "function factorize(input_number):\n    # Create an empty list to store the prime factors\n    create an empty list named \"prime_factors\"\n\n    # Start with 2, the smallest prime number\n    set a variable named \"divisor\" to 2\n\n    # While the input number is greater than 1\n    while input_number is greater than 1:\n        # If the input number is divisible by the divisor\n        if input_number is divisible by divisor:\n            # Add the divisor to the list of prime factors\n            add divisor to \"prime_factors\"\n            # Divide the input number by the divisor\n            divide input_number by divisor\n        else:\n            # If the input number is not divisible by the divisor, increment the divisor\n            increment divisor by 1\n\n    # Return the list of prime factors\n    return prime_factors", "26": "function remove_duplicates(input_list):\n    # Create an empty collection to keep track of elements we've seen\n    create an empty collection named \"seen_elements\"\n\n    # Create an empty list to store the result\n    create an empty list named \"result\"\n\n    # Loop through each element in the input list\n    for each element in input_list:\n        # Check if we've come across this element before\n        if element is already in \"seen_elements\":\n            # If we have, this is a duplicate, so skip it\n            continue\n        else:\n            # If it's a new element, add it to our collection to remember it\n            add element to \"seen_elements\"\n            # Also add it to the result list\n            add element to \"result\"\n\n    # Return the result list\n    return \"result\"", "27": "function flip_case(input_string):\n    # Create an empty string to store the result\n    create an empty string named \"result\"\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # Check if the character is uppercase\n        if character is uppercase:\n            # If it is, convert it to lowercase and add it to the result\n            convert character to lowercase and add it to \"result\"\n        else:\n            # If it's not uppercase, it must be lowercase, so convert it to uppercase and add it to the result\n            convert character to uppercase and add it to \"result\"\n\n    # Return the result\n    return \"result\"", "28": "function concatenate_strings(list_of_strings):\n    # Create an empty string to store the result\n    create an empty string named \"result\"\n\n    # Loop through each string in the list\n    for each string in list_of_strings:\n        # Add the current string to the result\n        add string to \"result\"\n\n    # Return the result\n    return \"result\"", "29": "function filter_by_prefix(input_strings, prefix):\n    # Create an empty list to store the filtered strings\n    create an empty list named \"filtered_strings\"\n\n    # Loop through each string in the input list\n    for each string in input_strings:\n        # Check if the string starts with the given prefix\n        if string starts with prefix:\n            # If it does, add it to the list of filtered strings\n            add string to \"filtered_strings\"\n\n    # Return the list of filtered strings\n    return \"filtered_strings\"", "30": "function get_positive_numbers(input_list):\n    # Create an empty list to store the positive numbers\n    create an empty list named \"positive_numbers\"\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Check if the number is positive\n        if number is greater than 0:\n            # If it is, add it to the list of positive numbers\n            add number to \"positive_numbers\"\n\n    # Return the list of positive numbers\n    return \"positive_numbers\"", "31": "function is_prime(number):\n    # If the number is less than 2, it's not prime\n    if number is less than 2:\n        return False\n\n    # Check if the number is divisible by any number up to its square root\n    for each number from 2 to the square root of number:\n        if number is divisible by the current number:\n            return False\n\n    # If we've checked all numbers and found no divisors, it's prime\n    return True", "32": "function find_zero(coefficients):\n    # Check if the number of coefficients is even\n    if the length of coefficients is not even:\n        return \"Error: Number of coefficients should be even\"\n\n    # Check if the largest non-zero coefficient is 1\n    if the maximum value in coefficients is not 1:\n        return \"Error: Largest non-zero coefficient should be 1\"\n\n    # Initialize the lower and upper bounds for the root\n    let lower_bound = -1000000\n    let upper_bound = 1000000\n\n    # Iterate until the bounds are sufficiently close\n    while the absolute value of (upper_bound - lower_bound) is greater than 0.000001:\n        # Calculate the midpoint of the bounds\n        let midpoint = (lower_bound + upper_bound) / 2\n\n        # Evaluate the polynomial at the midpoint\n        let midpoint_value = evaluate_polynomial(coefficients, midpoint)\n\n        # If the midpoint value is close to zero, return it\n        if the absolute value of midpoint_value is less than 0.000001:\n            return midpoint\n\n        # If the midpoint value is positive, the root is in the lower half of the bounds\n        if midpoint_value > 0:\n            upper_bound = midpoint\n        # If the midpoint value is negative, the root is in the upper half of the bounds\n        else:\n            lower_bound = midpoint\n\n    # If no root is found within the specified tolerance, return an error message\n    return \"Error: No root found within the specified tolerance\"\n\n\nfunction evaluate_polynomial(coefficients, x):\n    # Initialize the result to the coefficient of the highest degree term\n    let result = coefficients[0]\n\n    # Iterate through the remaining coefficients\n    for i from 1 to the length of coefficients - 1:\n        # Multiply the current result by x and add the coefficient of the current term\n        result = result * x + coefficients[i]\n\n    # Return the final result\n    return result", "33": "function sort_third(input_list):\n    # Create an empty list to store the values at indices divisible by three\n    create an empty list named \"values_at_divisible_indices\"\n\n    # Loop through each index in the input list\n    for each index in the range of the length of input_list:\n        # Check if the index is divisible by three\n        if index modulo 3 equals 0:\n            # If it is, add the value at that index to our list\n            add the value at index in input_list to \"values_at_divisible_indices\"\n\n    # Sort the list of values\n    sort \"values_at_divisible_indices\" in ascending order\n\n    # Create an empty list to store the result\n    create an empty list named \"result\"\n\n    # Loop through each index in the input list\n    for each index in the range of the length of input_list:\n        # Check if the index is divisible by three\n        if index modulo 3 equals 0:\n            # If it is, add the first value from our sorted list to the result\n            add the first value in \"values_at_divisible_indices\" to \"result\"\n            # Remove the first value from our sorted list\n            remove the first value in \"values_at_divisible_indices\"\n        else:\n            # If it's not, add the value at that index to the result\n            add the value at index in input_list to \"result\"\n\n    # Return the result\n    return \"result\"", "34": "function unique_elements(input_list):\n    # Create an empty collection to keep track of unique elements\n    create an empty collection named \"unique_elements\"\n\n    # Loop through each element in the input list\n    for each element in input_list:\n        # Check if we've come across this element before\n        if element is already in \"unique_elements\":\n            # If we have, this is a duplicate, so skip it\n            continue\n        else:\n            # If it's a new element, add it to our collection to remember it\n            add element to \"unique_elements\"\n\n    # Sort the unique elements\n    sort \"unique_elements\" in ascending order\n\n    # Return the sorted list of unique elements\n    return \"unique_elements\"", "35": "function find_max_element(input_list):\n    # Assume the first element is the maximum\n    set max_element to the first element of input_list\n\n    # Loop through each element in the input list\n    for each element in input_list:\n        # Check if the current element is greater than the current max\n        if element is greater than max_element:\n            # If it is, update the max\n            set max_element to element\n\n    # Return the max element\n    return max_element", "36": "function fizz_buzz(n):\n    # Initialize a counter for the number of times the digit 7 appears\n    set a counter to 0\n\n    # Loop through each number less than n\n    for each number in range from 1 to n:\n        # Check if the number is divisible by 11 or 13\n        if number is divisible by 11 or number is divisible by 13:\n            # Convert the number to a string\n            convert number to string\n\n            # Check if the string contains the digit 7\n            if string contains \"7\":\n                # If it does, increment the counter\n                increment counter\n\n    # Return the final count\n    return counter", "37": "function sort_even_numbers(input_list):\n    # Create an empty list to store the even numbers\n    create an empty list named \"even_numbers\"\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Check if the index of the number is even\n        if index of number is even:\n            # If it is, add the number to the list of even numbers\n            add number to \"even_numbers\"\n\n    # Sort the list of even numbers\n    sort \"even_numbers\" in ascending order\n\n    # Create an empty list to store the sorted list\n    create an empty list named \"sorted_list\"\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Check if the index of the number is even\n        if index of number is even:\n            # If it is, add the first number from the sorted list of even numbers to the sorted list\n            add first number from \"even_numbers\" to \"sorted_list\"\n            # Remove the first number from the sorted list of even numbers\n            remove first number from \"even_numbers\"\n        else:\n            # If the index of the number is odd, add the number to the sorted list\n            add number to \"sorted_list\"\n\n    # Return the sorted list\n    return \"sorted_list\"", "38": "function encode_cyclic(input_string):\n    # Create an empty list to store the groups of three characters\n    create an empty list named \"groups\"\n\n    # Loop through the input string in steps of three characters\n    for each group of three characters in input_string:\n        # Add the group to the list of groups\n        add group to \"groups\"\n\n    # Loop through the list of groups\n    for each group in \"groups\":\n        # If the group has three characters, cycle them\n        if the length of group is 3:\n            # Move the first character to the end of the group\n            move the first character of group to the end of group\n\n    # Join the groups back together into a single string\n    return join \"groups\"\n\n\nfunction decode_cyclic(input_string):\n    # Create an empty list to store the groups of three characters\n    create an empty list named \"groups\"\n\n    # Loop through the input string in steps of three characters\n    for each group of three characters in input_string:\n        # Add the group to the list of groups\n        add group to \"groups\"\n\n    # Loop through the list of groups\n    for each group in \"groups\":\n        # If the group has three characters, un-cycle them\n        if the length of group is 3:\n            # Move the last character to the start of the group\n            move the last character of group to the start of group\n\n    # Join the groups back together into a single string\n    return join \"groups\"", "39": "function prime_fib(n: int):\n    # Initialize variables\n    count = 0\n    fib_num = 0\n    fib_num_1 = 1\n    fib_num_2 = 0\n\n    # Loop until we find the n-th prime Fibonacci number\n    while count < n:\n        # Calculate the next Fibonacci number\n        fib_num = fib_num_1 + fib_num_2\n        fib_num_2 = fib_num_1\n        fib_num_1 = fib_num\n\n        # Check if the Fibonacci number is prime\n        if is_prime(fib_num):\n            count += 1\n\n    # Return the n-th prime Fibonacci number\n    return fib_num\n\nfunction is_prime(num: int):\n    # Check if the number is less than 2 (not prime)\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any number up to its square root (not prime)\n    for i in range(2, int(sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n\n    # If the number passes the checks, it's prime\n    return True", "40": "function triples_sum_to_zero(input_list):\n    # Create an empty collection to keep track of numbers we've seen\n    create an empty collection named \"seen_numbers\"\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Check if we've come across this number before\n        if number is already in \"seen_numbers\":\n            # If we have, this is the first repeated number, so return it\n            return True\n        else:\n            # If it's a new number, add it to our collection to remember it\n            add number to \"seen_numbers\"\n\n    # If we've checked all numbers and found no repeats, return a signal (like None or a message)\n    return False", "41": "function car_race_collision(n: int):\n    # Initialize a counter for collisions\n    set collision_counter to 0\n\n    # Create two lists to store the positions of cars moving left and right\n    create a list named \"left_cars\"\n    create a list named \"right_cars\"\n\n    # Populate the lists with the initial positions of cars\n    for i from 1 to n:\n        add i to \"left_cars\"\n        add n+1-i to \"right_cars\"\n\n    # Loop until a collision occurs\n    while True:\n        # Check if a collision has occurred\n        if there is a car in \"left_cars\" that is in \"right_cars\":\n            # If a collision has occurred, increment the collision counter\n            increment collision_counter by 1\n\n        # Move the cars one step forward\n        for each car in \"left_cars\":\n            increment car by 1\n        for each car in \"right_cars\":\n            decrement car by 1\n\n        # If a collision has occurred, continue the loop\n        if a collision has occurred:\n            continue\n\n        # If no collision has occurred, break the loop\n        break\n\n    # Return the number of collisions\n    return collision_counter", "42": "function increment_list(input_list):\n    # Create an empty list to store the result\n    create an empty list named \"result\"\n\n    # Loop through each element in the input list\n    for each element in input_list:\n        # Increment the element by 1 and add it to the result list\n        add element incremented by 1 to \"result\"\n\n    # Return the result list\n    return \"result\"", "43": "function pairs_sum_to_zero(input_list):\n    # Create an empty set to keep track of numbers we've seen\n    create an empty set named \"seen_numbers\"\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Calculate the number we need to find in our set\n        calculate the number we need to find as the negative of the current number\n\n        # Check if we've come across this number before\n        if the number we need to find is in \"seen_numbers\":\n            # If we have, this is the pair that sums to zero, so return True\n            return True\n        else:\n            # If it's a new number, add it to our set to remember it\n            add the current number to \"seen_numbers\"\n\n    # If we've checked all numbers and found no pairs that sum to zero, return False\n    return False", "44": "function change_base(input_number, target_base):\n    # Create an empty string to store the result\n    create an empty string named \"result\"\n\n    # While the input number is greater than 0\n    while input_number is greater than 0:\n        # Calculate the remainder when the input number is divided by the target base\n        calculate the remainder when input_number is divided by target_base\n\n        # If the remainder is less than 10, convert it to a character and add it to the result\n        if the remainder is less than 10:\n            convert the remainder to a character and add it to the result\n        else:\n            # If the remainder is 10 or greater, convert it to a character using the corresponding letter and add it to the result\n            convert the remainder to a character using the corresponding letter and add it to the result\n\n        # Divide the input number by the target base and round down to the nearest whole number\n        divide input_number by target_base and round down to the nearest whole number\n\n    # Return the result string in reverse order\n    return the result string in reverse order", "45": "function calculate_triangle_area(side_length, height):\n    # Calculate the area of the triangle\n    area = (side_length * height) / 2\n\n    # Return the calculated area\n    return area", "46": "function fib4(n: int):\n    # Create a list to store the first four Fibonacci numbers\n    create a list named \"fib_numbers\" and add 4 elements to it: 0, 0, 2, 0\n\n    # If n is less than 4, return the n-th Fibonacci number directly\n    if n < 4:\n        return fib_numbers[n]\n\n    # Otherwise, calculate the n-th Fibonacci number iteratively\n    for i from 4 to n:\n        # The n-th Fibonacci number is the sum of the previous four numbers\n        calculate the n-th Fibonacci number as the sum of the last four numbers in \"fib_numbers\"\n        add the calculated Fibonacci number to \"fib_numbers\"\n\n    # Return the n-th Fibonacci number\n    return the last element in \"fib_numbers\"", "47": "function find_median(input_list):\n    # Sort the input list in ascending order\n    sort input_list in ascending order\n\n    # Find the length of the list\n    find the length of input_list and store it in variable named \"length\"\n\n    # If the length of the list is even\n    if length is even:\n        # Find the middle two elements and add them together\n        find the element at index (length / 2) - 1 and store it in variable named \"first_middle\"\n        find the element at index length / 2 and store it in variable named \"second_middle\"\n        add first_middle and second_middle and divide by 2 to find the median\n    else:\n        # If the length of the list is odd, the median is the middle element\n        find the element at index length / 2 and store it in variable named \"median\"\n\n    # Return the median\n    return median", "48": "function is_palindrome(input_string):\n    # Initialize two pointers, one at the start and one at the end of the string\n    set a pointer named \"start\" to 0\n    set a pointer named \"end\" to the length of the input_string minus 1\n\n    # Loop until the two pointers meet in the middle\n    while start is less than or equal to end:\n        # If the characters at the start and end pointers are not the same, return False\n        if the character at position \"start\" in input_string is not the same as the character at position \"end\" in input_string:\n            return False\n\n        # Move the start pointer one step to the right\n        increment \"start\" by 1\n\n        # Move the end pointer one step to the left\n        decrement \"end\" by 1\n\n    # If we've checked all pairs of characters and found no differences, return True\n    return True", "49": "function modp(n, p):\n    # Initialize result\n    let result be 1\n\n    # Update result if n & i is not zero\n    for i from 0 to n:\n        if n & (1 << i) is not zero:\n            result = (result * 2) % p\n\n    # Return result\n    return result", "50": "function encode_shift(input_string):\n    # Create an empty string to store the encoded characters\n    create an empty string named \"encoded_string\"\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # Calculate the encoded character by shifting it by 5 places in the alphabet\n        calculate the encoded character by shifting character by 5 places in the alphabet\n\n        # Add the encoded character to the encoded string\n        add the encoded character to \"encoded_string\"\n\n    # Return the encoded string\n    return \"encoded_string\"\n\n\nfunction decode_shift(encoded_string):\n    # Create an empty string to store the decoded characters\n    create an empty string named \"decoded_string\"\n\n    # Loop through each character in the encoded string\n    for each character in encoded_string:\n        # Calculate the decoded character by shifting it back by 5 places in the alphabet\n        calculate the decoded character by shifting character back by 5 places in the alphabet\n\n        # Add the decoded character to the decoded string\n        add the decoded character to \"decoded_string\"\n\n    # Return the decoded string\n    return \"decoded_string\"", "51": "function remove_vowels(input_string):\n    # Create a string of vowels\n    create a string named \"vowels\" with the characters \"aeiouAEIOU\"\n\n    # Create an empty string to store the result\n    create an empty string named \"result\"\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # Check if the character is a vowel\n        if character is not in \"vowels\":\n            # If it's not a vowel, add it to the result string\n            add character to \"result\"\n\n    # Return the result string\n    return \"result\"", "52": "function check_below_threshold(input_list, threshold):\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Check if the number is below the threshold\n        if number is greater than or equal to threshold:\n            # If it is, return False because the list does not meet the threshold condition\n            return False\n\n    # If we've checked all numbers and found no numbers above the threshold, return True\n    return True", "53": "function add_two_numbers(x: int, y: int):\n    # Initialize a variable to store the sum\n    create a variable named \"sum\" and set it to 0\n\n    # Add x and y together and store the result in the \"sum\" variable\n    set \"sum\" to \"sum\" plus x plus y\n\n    # Return the result\n    return \"sum\"", "54": "function same_chars(string0, string1):\n    # Create an empty collection to keep track of characters in string0\n    create an empty collection named \"characters_in_string0\"\n\n    # Loop through each character in string0\n    for each character in string0:\n        # Add the character to our collection\n        add character to \"characters_in_string0\"\n\n    # Loop through each character in string1\n    for each character in string1:\n        # Check if the character is in our collection of characters in string0\n        if character is not in \"characters_in_string0\":\n            # If it's not, return False, because string1 doesn't have the same characters as string0\n            return False\n\n    # If we've checked all characters in string1 and found no mismatches, return True\n    return True", "55": "function fibonacci(n):\n    # Initialize the first two Fibonacci numbers\n    let first_number = 0\n    let second_number = 1\n\n    # If n is 0, return 0\n    if n is 0:\n        return first_number\n\n    # If n is 1, return 1\n    if n is 1:\n        return second_number\n\n    # For n greater than 1, calculate the Fibonacci number\n    for i from 2 to n:\n        let next_number = first_number + second_number\n        first_number = second_number\n        second_number = next_number\n\n    # Return the n-th Fibonacci number\n    return second_number", "56": "function correct_bracketing(brackets: str):\n    # Create a variable to keep track of the number of open brackets\n    create a variable named \"open_brackets\" and set it to 0\n\n    # Loop through each character in the input string\n    for each character in brackets:\n        # If the character is an opening bracket\n        if character is \"<\":\n            # Increment the count of open brackets\n            increment \"open_brackets\" by 1\n        # If the character is a closing bracket\n        else if character is \">\":\n            # Decrement the count of open brackets\n            decrement \"open_brackets\" by 1\n            # If we've closed more brackets than we've opened, return False\n            if \"open_brackets\" is less than 0:\n                return False\n\n    # If we've checked all characters and found no unmatched brackets, return True\n    if \"open_brackets\" is not 0:\n        return False\n    else:\n        return True", "57": "function is_monotonic(input_list):\n    # Initialize a variable to keep track of the direction of the list\n    set direction to None\n\n    # Loop through each pair of consecutive elements in the list\n    for each pair of consecutive elements in input_list:\n        # If this is the first pair, set the direction\n        if direction is None:\n            if first element of pair is less than second element of pair:\n                set direction to \"increasing\"\n            else if first element of pair is greater than second element of pair:\n                set direction to \"decreasing\"\n            else:\n                continue\n\n        # If this is not the first pair, check if it matches the direction\n        else:\n            if direction is \"increasing\" and first element of pair is less than second element of pair:\n                continue\n            else if direction is \"decreasing\" and first element of pair is greater than second element of pair:\n                continue\n            else:\n                return False\n\n    # If we've checked all pairs and found no inconsistencies, return True\n    return True", "58": "function find_common_elements(list1, list2):\n    # Create an empty list to store the common elements\n    create an empty list named \"common_elements\"\n\n    # Loop through each element in the first list\n    for each element in list1:\n        # Check if the element is in the second list\n        if element is in list2:\n            # If it is, add it to the common_elements list\n            add element to common_elements\n\n    # Remove duplicates from the common_elements list\n    remove duplicates from common_elements\n\n    # Sort the common_elements list\n    sort common_elements\n\n    # Return the sorted list of common elements\n    return common_elements", "59": "function find_largest_prime_factor(input_number):\n    # Create a variable to keep track of the largest prime factor\n    create a variable named \"largest_prime_factor\" and set it to 2\n\n    # While the input number is divisible by 2, divide it by 2\n    while input_number is divisible by 2:\n        input_number = input_number divided by 2\n\n    # If the input number is now 1, return 2 as the largest prime factor\n    if input_number is 1:\n        return 2\n\n    # Start checking potential factors from 3 onwards\n    for each number from 3 to the square root of input_number:\n        # While the input number is divisible by the current number, divide it by the current number\n        while input_number is divisible by the current number:\n            input_number = input_number divided by the current number\n            # If the current number is greater than the largest prime factor found so far, update the largest prime factor\n            if the current number is greater than largest_prime_factor:\n                largest_prime_factor = the current number\n\n    # If the input number is greater than 2, it must be a prime number greater than 2 and hence the largest prime factor\n    if input_number is greater than 2:\n        largest_prime_factor = input_number\n\n    # Return the largest prime factor\n    return largest_prime_factor", "60": "function sum_to_n(n):\n    # Initialize a variable to hold the sum\n    set sum to 0\n\n    # Loop from 1 to n\n    for i from 1 to n:\n        # Add the current number to the sum\n        add i to sum\n\n    # Return the sum\n    return sum", "61": "function correct_bracketing(brackets: str):\n    # Create a stack to keep track of the opening brackets\n    create an empty stack named \"bracket_stack\"\n\n    # Loop through each character in the input string\n    for each character in brackets:\n        # If the character is an opening bracket, push it onto the stack\n        if character is \"(\":\n            push character onto \"bracket_stack\"\n        # If the character is a closing bracket\n        else if character is \")\":\n            # If the stack is empty, this is an unmatched closing bracket, so return False\n            if \"bracket_stack\" is empty:\n                return False\n            # If the stack is not empty, pop the top bracket off the stack\n            else:\n                pop the top bracket from \"bracket_stack\"\n\n    # If we've checked all characters and the stack is empty, return True\n    if \"bracket_stack\" is empty:\n        return True\n    # If the stack is not empty, there are unmatched opening brackets, so return False\n    else:\n        return False", "62": "function derivative(coefficients: list):\n    # Create an empty list to store the derivative coefficients\n    create an empty list named \"derivative_coefficients\"\n\n    # Loop through each coefficient in the input list\n    for each index from 1 to the length of coefficients:\n        # Multiply the coefficient by its index and add it to the derivative coefficients\n        multiply the coefficient at index by index and add the result to \"derivative_coefficients\"\n\n    # Return the derivative coefficients\n    return \"derivative_coefficients\"", "63": "function fibfib(n):\n    # Create a list to store the fibfib sequence up to n\n    create a list named \"fibfib_sequence\" with 3 elements: 0, 0, 1\n\n    # If n is less than 3, return the n-th element of the sequence\n    if n is less than 3:\n        return the n-th element of \"fibfib_sequence\"\n\n    # Otherwise, calculate the n-th element of the sequence\n    for i from 3 to n:\n        # The n-th element is the sum of the (n-1)-th, (n-2)-th, and (n-3)-th elements\n        calculate the n-th element as the sum of the (n-1)-th, (n-2)-th, and (n-3)-th elements of \"fibfib_sequence\"\n        add the calculated element to \"fibfib_sequence\"\n\n    # Return the n-th element of the sequence\n    return the n-th element of \"fibfib_sequence\"", "64": "function count_vowels(input_string):\n    # Initialize a counter to keep track of the number of vowels\n    initialize a variable named \"vowel_count\" to 0\n\n    # Define the vowels\n    define a list of vowels named \"vowels\" containing 'a', 'e', 'i', 'o', 'u'\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # Check if the character is a vowel\n        if character is in \"vowels\":\n            # If it is, increment the vowel count\n            increment \"vowel_count\" by 1\n\n    # If the last character is 'y' or 'Y', increment the vowel count\n    if the last character in input_string is 'y' or 'Y':\n        increment \"vowel_count\" by 1\n\n    # Return the final vowel count\n    return \"vowel_count\"", "65": "function circular_shift(input_number, shift):\n    # Convert the input number to a string\n    convert input_number to a string and store it in a variable named \"number_string\"\n\n    # Get the length of the number string\n    get the length of \"number_string\" and store it in a variable named \"length\"\n\n    # If shift is greater than the length of the number, reverse the number and return it\n    if shift > length:\n        reverse \"number_string\" and return it\n\n    # Otherwise, perform the circular shift\n    else:\n        # Get the last shift digits\n        get the last shift digits of \"number_string\" and store it in a variable named \"last_shift_digits\"\n\n        # Get the remaining digits\n        get the remaining digits of \"number_string\" and store it in a variable named \"remaining_digits\"\n\n        # Combine the last shift digits and the remaining digits in reverse order\n        combine \"last_shift_digits\" and \"remaining_digits\" in reverse order and return it", "66": "function digit_sum(input_string):\n    # Initialize a variable to keep track of the sum\n    set sum to 0\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # Check if the character is an uppercase letter\n        if character is an uppercase letter:\n            # If it is, add its ASCII value to the sum\n            add ASCII value of character to sum\n\n    # Return the sum\n    return sum", "67": "function fruit_distribution(fruit_string, total_fruits):\n    # Split the string into the number of apples and oranges\n    split the fruit_string into two parts at \"and\"\n    the first part is the number of apples\n    the second part is the number of oranges\n\n    # Convert the string parts into integers\n    convert the first part into an integer and call it apples\n    convert the second part into an integer and call it oranges\n\n    # Calculate the number of mangoes\n    mangoes = total_fruits - apples - oranges\n\n    # Return the number of mangoes\n    return mangoes", "68": "function pluck(arr):\n    # Initialize smallest_even_value and smallest_even_index to be infinity and -1 respectively\n    smallest_even_value = infinity\n    smallest_even_index = -1\n\n    # Loop through each element in the array\n    for each index in range(0, length of arr):\n        # Check if the element is even\n        if arr[index] is even:\n            # If it is, check if it's smaller than the current smallest even value\n            if arr[index] < smallest_even_value:\n                # If it is, update smallest_even_value and smallest_even_index\n                smallest_even_value = arr[index]\n                smallest_even_index = index\n\n    # If smallest_even_index is still -1, return []\n    if smallest_even_index is -1:\n        return []\n    else:\n        # Otherwise, return [smallest_even_value, smallest_even_index]\n        return [smallest_even_value, smallest_even_index]", "69": "function find_greatest_frequency(input_list):\n    # Create an empty dictionary to keep track of frequencies\n    create an empty dictionary named \"frequency_dict\"\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # If the number is already in the dictionary, increment its count\n        if number is already in \"frequency_dict\":\n            increment the count of number in \"frequency_dict\" by 1\n        else:\n            # If it's a new number, add it to the dictionary with a count of 1\n            add number to \"frequency_dict\" with a count of 1\n\n    # Loop through each number in the input list in reverse order\n    for each number in reversed(input_list):\n        # If the count of the number in \"frequency_dict\" is greater than or equal to the number itself\n        if the count of number in \"frequency_dict\" is greater than or equal to number:\n            # Return the number\n            return number\n\n    # If no such number is found, return -1\n    return -1", "70": "function strange_sort_list(input_list):\n    # Create an empty list to store the sorted elements\n    create an empty list named \"sorted_list\"\n\n    # While there are still elements in the input list\n    while there are still elements in \"input_list\":\n        # Find the minimum and maximum values in the input list\n        find the minimum value in \"input_list\" and remove it\n        find the maximum value in \"input_list\" and remove it\n\n        # Add the minimum and maximum values to the sorted list\n        add the minimum value to \"sorted_list\"\n        add the maximum value to \"sorted_list\"\n\n    # Return the sorted list\n    return \"sorted_list\"", "71": "function calculate_triangle_area(side1, side2, side3):\n    # Check if the sides form a valid triangle\n    if side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1:\n        # Calculate the semi-perimeter\n        s = (side1 + side2 + side3) / 2\n        # Calculate the area using Heron's formula\n        area = sqrt(s * (s - side1) * (s - side2) * (s - side3))\n        # Round the area to 2 decimal points\n        area = round(area, 2)\n        # Return the area\n        return area\n    else:\n        # Return -1 if the sides do not form a valid triangle\n        return -1", "72": "function will_it_fly(object, weight):\n    # Check if the object is a palindrome\n    if object is not a palindrome:\n        return False\n\n    # Calculate the sum of the elements in the object\n    sum_of_elements = calculate the sum of the elements in object\n\n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum_of_elements is greater than weight:\n        return False\n\n    # If the object is a palindrome and the sum of its elements is less than or equal to the maximum possible weight, return True\n    return True", "73": "function smallest_change(input_array):\n    # Initialize a variable to keep track of the number of changes needed\n    set changes_needed to 0\n\n    # Initialize two pointers, one at the start of the array and one at the end\n    set start_pointer to 0\n    set end_pointer to length of input_array - 1\n\n    # While the start pointer is less than the end pointer\n    while start_pointer < end_pointer:\n        # If the elements at the start and end pointers are the same\n        if element at input_array[start_pointer] equals element at input_array[end_pointer]:\n            # Move the pointers towards the center of the array\n            increment start_pointer by 1\n            decrement end_pointer by 1\n        else:\n            # If the elements are different, increment the number of changes needed\n            increment changes_needed by 1\n            # Also, try to change the element at the start pointer to the element at the end pointer\n            set element at input_array[start_pointer] to element at input_array[end_pointer]\n            # Then, move the pointers towards the center of the array\n            increment start_pointer by 1\n            decrement end_pointer by 1\n\n    # Return the number of changes needed\n    return changes_needed", "74": "function total_match(list1, list2):\n    # Calculate the total number of characters in both lists\n    total_chars_list1 = calculate_total_chars(list1)\n    total_chars_list2 = calculate_total_chars(list2)\n\n    # Compare the total number of characters in both lists\n    if total_chars_list1 < total_chars_list2:\n        # If list1 has fewer total characters, return list1\n        return list1\n    else if total_chars_list1 > total_chars_list2:\n        # If list2 has fewer total characters, return list2\n        return list2\n    else:\n        # If both lists have the same total number of characters, return list1\n        return list1\n\nfunction calculate_total_chars(list):\n    # Initialize a variable to keep track of the total number of characters\n    total_chars = 0\n\n    # Loop through each string in the list\n    for each string in list:\n        # Add the length of the string to the total number of characters\n        total_chars = total_chars + length of string\n\n    # Return the total number of characters\n    return total_chars", "75": "function is_multiply_prime(input_number):\n    # Create a list of prime numbers less than 100\n    create a list named \"prime_numbers\" with the numbers 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n\n    # Create an empty list to store the prime factors of the input number\n    create an empty list named \"prime_factors\"\n\n    # Loop through each prime number in the list\n    for each prime_number in prime_numbers:\n        # While the input number is divisible by the prime number\n        while input_number is divisible by prime_number:\n            # Divide the input number by the prime number\n            divide input_number by prime_number\n            # Add the prime number to the list of prime factors\n            add prime_number to prime_factors\n\n    # If the input number is 1 and there are exactly 3 prime factors, return True\n    if input_number is 1 and the length of prime_factors is 3:\n        return True\n    else:\n        # Otherwise, return False\n        return False", "76": "function is_simple_power(x, n):\n    # Check if n is 1\n    if n is 1:\n        # If x is 1, return true\n        if x is 1:\n            return true\n        # If x is not 1, return false\n        else:\n            return false\n    # If n is not 1\n    else:\n        # Initialize a variable to store the result of n raised to the power of 0\n        let result be n raised to the power of 0\n        # Loop until result is less than or equal to x\n        while result is less than or equal to x:\n            # If result is equal to x, return true\n            if result is equal to x:\n                return true\n            # Increment the power of n\n            increment the power of n by 1\n            # Update the result\n            let result be n raised to the power of the new power\n        # If we've checked all possible powers and found no match, return false\n        return false", "77": "function is_cube(number):\n    # Initialize a variable to store the cube root of the number\n    let cube_root be the cube root of number\n\n    # Check if the cube root is an integer\n    if cube_root is an integer:\n        # If it is, the number is a cube, so return True\n        return True\n    else:\n        # If it's not, the number is not a cube, so return False\n        return False", "78": "function count_prime_hex_digits(hex_string):\n    # Create a list of prime hexadecimal digits\n    create a list named \"prime_hex_digits\" with elements 2, 3, 5, 7, B, D\n\n    # Initialize a counter for prime hexadecimal digits\n    create a variable named \"prime_count\" and set it to 0\n\n    # Loop through each character in the hexadecimal string\n    for each character in hex_string:\n        # Check if the character is a prime hexadecimal digit\n        if character is in \"prime_hex_digits\":\n            # If it is, increment the prime count\n            increment \"prime_count\" by 1\n\n    # Return the count of prime hexadecimal digits\n    return \"prime_count\"", "79": "function convert_decimal_to_binary(decimal_number):\n    # Convert the decimal number to binary\n    convert decimal_number to binary\n\n    # Add the extra characters 'db' at the beginning and at the end of the string\n    add 'db' at the beginning of the string\n    add 'db' at the end of the string\n\n    # Return the binary number as a string\n    return the binary number as a string\n\n# Test the function\nprint(convert_decimal_to_binary(15))  # returns \"db1111db\"\nprint(convert_decimal_to_binary(32))  # returns \"db100000db\"", "80": "function is_happy(input_string):\n    # Check if the length of the string is less than 3\n    if the length of input_string is less than 3:\n        # If it is, return False\n        return False\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # Check if the next two characters are the same\n        if the next two characters are the same:\n            # If they are, return False\n            return False\n\n    # If we've checked all characters and found no repeats, return True\n    return True", "81": "function grade_equation(gpa_list):\n    # Create an empty list to store the letter grades\n    create an empty list named \"letter_grades\"\n\n    # Loop through each GPA in the input list\n    for each gpa in gpa_list:\n        # Check the GPA and assign the corresponding letter grade\n        if gpa is 4.0:\n            add \"A+\" to \"letter_grades\"\n        elif gpa is greater than 3.7:\n            add \"A\" to \"letter_grades\"\n        elif gpa is greater than 3.3:\n            add \"A-\" to \"letter_grades\"\n        elif gpa is greater than 3.0:\n            add \"B+\" to \"letter_grades\"\n        elif gpa is greater than 2.7:\n            add \"B\" to \"letter_grades\"\n        elif gpa is greater than 2.3:\n            add \"B-\" to \"letter_grades\"\n        elif gpa is greater than 2.0:\n            add \"C+\" to \"letter_grades\"\n        elif gpa is greater than 1.7:\n            add \"C\" to \"letter_grades\"\n        elif gpa is greater than 1.3:\n            add \"C-\" to \"letter_grades\"\n        elif gpa is greater than 1.0:\n            add \"D+\" to \"letter_grades\"\n        elif gpa is greater than 0.7:\n            add \"D\" to \"letter_grades\"\n        elif gpa is greater than 0.0:\n            add \"D-\" to \"letter_grades\"\n        else:\n            add \"E\" to \"letter_grades\"\n\n    # Return the list of letter grades\n    return \"letter_grades\"", "82": "function is_prime(number):\n    # Check if the number is less than 2\n    if number is less than 2:\n        # If it is, return False\n        return False\n    # Check if the number is 2\n    if number is 2:\n        # If it is, return True\n        return True\n    # Check if the number is divisible by any number up to its square root\n    for each number from 2 to the square root of number:\n        if number is divisible by the current number:\n            # If it is, return False\n            return False\n    # If the number has no divisors other than 1 and itself, return True\n    return True\n\nfunction prime_length(input_string):\n    # Get the length of the input string\n    length = length of input_string\n    # Check if the length is a prime number\n    if is_prime(length):\n        # If it is, return True\n        return True\n    else:\n        # If it's not, return False\n        return False", "83": "function count_one_start_end(n):\n    # Initialize the count of numbers that start or end with 1\n    initialize count as 0\n\n    # Calculate the total number of n-digit numbers\n    total_numbers = 10 ** n\n\n    # If n is 1, there is only one number that starts or ends with 1, so return 1\n    if n is 1:\n        return 1\n\n    # If n is greater than 1, there are 10^(n-1) numbers that start or end with 1\n    count += 10 ** (n - 1)\n\n    # Return the total count\n    return count", "84": "function binary_sum_of_digits(N):\n    # Convert the number to a string to easily iterate over its digits\n    convert N to a string and assign it to \"number_string\"\n\n    # Initialize a variable to keep track of the sum of the digits\n    create a variable named \"sum_of_digits\" and set it to 0\n\n    # Loop through each digit in the number\n    for each digit in number_string:\n        # Convert the digit back to an integer and add it to the sum\n        convert digit to an integer and add it to sum_of_digits\n\n    # Convert the sum to binary and return it\n    convert sum_of_digits to binary and return it\n\nThis pseudocode converts the input number to a string, then iterates over each digit in the string, converts it back to an integer, and adds it to a running total. Finally, it converts the total to binary and returns it.", "85": "function add_even_elements_at_odd_indices(input_list):\n    # Initialize a variable to keep track of the sum\n    set sum to 0\n\n    # Loop through each element in the input list\n    for each index in range(1, length of input_list, 2):\n        # Check if the element at this index is even\n        if element at index in input_list is even:\n            # If it is, add it to the sum\n            add element at index in input_list to sum\n\n    # Return the sum\n    return sum", "86": "function anti_shuffle(input_string):\n    # Split the input string into words\n    split input_string into words\n\n    # For each word in the list of words\n    for each word in words:\n        # If the word is a single character or a blank space\n        if the length of word is 1 or the word is a blank space:\n            # Leave it as is\n            continue\n        else:\n            # Sort the characters in the word\n            sort the characters in word\n\n            # Join the sorted characters back into a word\n            join the sorted characters into a word\n\n            # Replace the original word with the sorted word\n            replace the original word with the sorted word\n\n    # Join the words back into a sentence\n    join the words into a sentence\n\n    # Return the sentence\n    return the sentence", "87": "function find_coordinates(input_list, target_number):\n    # Create an empty list to store the coordinates\n    create an empty list named \"coordinates\"\n\n    # Loop through each row in the input list\n    for each row in input_list:\n        # Loop through each number in the row\n        for each number in row:\n            # Check if the number is equal to the target number\n            if number equals target_number:\n                # If it is, find the row and column of the number\n                find the row and column of the number in the row\n                # Add the coordinate to the list\n                add the coordinate to the list\n\n    # Sort the list of coordinates first by row in ascending order\n    sort the list of coordinates by row in ascending order\n\n    # Sort the list of coordinates by column in descending order\n    sort the list of coordinates by column in descending order\n\n    # Return the list of coordinates\n    return the list of coordinates", "88": "function sort_array(input_array):\n    # Calculate the sum of the first and last elements of the array\n    sum = input_array[0] + input_array[-1]\n\n    # Create a copy of the input array to avoid changing the original array\n    copy_array = input_array.copy()\n\n    # If the sum is even, sort the copy in descending order\n    if sum % 2 == 0:\n        copy_array.sort(reverse=True)\n    # If the sum is odd, sort the copy in ascending order\n    else:\n        copy_array.sort()\n\n    # Return the sorted copy of the array\n    return copy_array", "89": "function encrypt(input_string):\n    # Create an empty string to store the encrypted characters\n    create an empty string named \"encrypted_string\"\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # Check if the character is a letter\n        if character is a letter:\n            # If it is, calculate its new position after rotation\n            calculate the new position of the character after rotation\n\n            # Add the new character to the encrypted string\n            add the new character to \"encrypted_string\"\n        else:\n            # If it's not a letter, just add it to the encrypted string as is\n            add character to \"encrypted_string\"\n\n    # Return the encrypted string\n    return \"encrypted_string\"", "90": "function find_second_smallest(input_list):\n    # Initialize two variables to keep track of the smallest and second smallest elements\n    smallest = None\n    second_smallest = None\n\n    # Loop through each element in the input list\n    for each element in input_list:\n        # If this element is smaller than the smallest we've seen so far\n        if element < smallest:\n            # Update the second smallest to be the smallest, and the smallest to be this element\n            second_smallest = smallest\n            smallest = element\n        # If this element is not smaller than the smallest, but is smaller than the second smallest\n        else if element < second_smallest:\n            # Update the second smallest to be this element\n            second_smallest = element\n\n    # Return the second smallest element, or None if there is no such element\n    return second_smallest", "91": "function count_boredoms(input_string):\n    # Initialize a counter for boredoms\n    set boredom_counter to 0\n\n    # Split the input string into sentences\n    split input_string into sentences using '.' or '?' or '!' as delimiters\n\n    # Loop through each sentence\n    for each sentence in sentences:\n        # Check if the sentence starts with \"I\"\n        if the first word of sentence is \"I\":\n            # If it does, increment the boredom counter\n            increment boredom_counter by 1\n\n    # Return the boredom counter\n    return boredom_counter", "92": "function any_int(x, y, z):\n    # Check if all inputs are integers\n    if x is not an integer or y is not an integer or z is not an integer:\n        return False\n\n    # Check if one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False", "93": "function encode_message(input_message):\n    # Create a dictionary to map vowels to their replacements\n    create a dictionary named \"vowel_replacements\" with keys 'a', 'e', 'i', 'o', 'u' and values 'c', 'g', 'k', 'm', 'n'\n\n    # Create an empty string to store the encoded message\n    create an empty string named \"encoded_message\"\n\n    # Loop through each character in the input message\n    for each character in input_message:\n        # Check if the character is a vowel\n        if character is a key in \"vowel_replacements\":\n            # If it is, replace it with its replacement\n            replace character with the value of \"vowel_replacements\" at key \"character\"\n\n        # Swap case of the character\n        if character is a lowercase letter:\n            replace character with its uppercase equivalent\n        else if character is an uppercase letter:\n            replace character with its lowercase equivalent\n\n        # Add the encoded character to the encoded message\n        add character to \"encoded_message\"\n\n    # Return the encoded message\n    return \"encoded_message\"", "94": "function find_largest_prime_and_sum_digits(input_list):\n    # Create a function to check if a number is prime\n    function is_prime(number):\n        if number is less than 2:\n            return False\n        for each integer i from 2 to the square root of number:\n            if number is divisible by i:\n                return False\n        return True\n\n    # Create a variable to store the largest prime number found\n    create a variable named \"largest_prime\" and set it to None\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Check if the number is prime\n        if is_prime(number):\n            # If it is, check if it's larger than the current largest prime\n            if largest_prime is None or number is greater than largest_prime:\n                # If it is, update the largest prime\n                set largest_prime to number\n\n    # If no prime numbers were found, return None\n    if largest_prime is None:\n        return None\n\n    # Convert the largest prime to a string to make it iterable\n    convert largest_prime to a string\n\n    # Create a variable to store the sum of the digits\n    create a variable named \"sum_of_digits\" and set it to 0\n\n    # Loop through each digit in the string representation of the largest prime\n    for each character in largest_prime:\n        # Convert the character back to an integer and add it to the sum\n        convert character to an integer and add it to sum_of_digits\n\n    # Return the sum of the digits\n    return sum_of_digits", "95": "function check_dictionary_case(input_dictionary):\n    # Check if the dictionary is empty\n    if input_dictionary is empty:\n        return False\n\n    # Initialize variables to keep track of lower case and upper case keys\n    lower_case_keys = 0\n    upper_case_keys = 0\n\n    # Loop through each key in the dictionary\n    for each key in input_dictionary:\n        # Check if the key is in lower case\n        if key is in lower case:\n            increment lower_case_keys\n        # Check if the key is in upper case\n        else if key is in upper case:\n            increment upper_case_keys\n        # If the key is neither in lower case nor in upper case, return False\n        else:\n            return False\n\n    # If all keys are in lower case or all keys are in upper case, return True\n    if lower_case_keys is equal to the size of the dictionary or upper_case_keys is equal to the size of the dictionary:\n        return True\n    # If not all keys are in lower case or not all keys are in upper case, return False\n    else:\n        return False", "96": "function count_up_to(n):\n    # Create an empty list to store the prime numbers\n    create an empty list named \"prime_numbers\"\n\n    # Loop through each number from 2 to n\n    for each number from 2 to n:\n        # Assume the number is prime\n        set is_prime to true\n\n        # Check if the number is divisible by any number up to its square root\n        for each number from 2 to the square root of number:\n            if number is divisible by the current number:\n                # If it is, the number is not prime\n                set is_prime to false\n                break\n\n        # If the number is prime, add it to the list\n        if is_prime is true:\n            add number to \"prime_numbers\"\n\n    # Return the list of prime numbers\n    return \"prime_numbers\"", "97": "function multiply_unit_digits(num1, num2):\n    # Extract the unit digits of the two numbers\n    unit_digit1 = num1 modulo 10\n    unit_digit2 = num2 modulo 10\n\n    # Multiply the unit digits together\n    product = unit_digit1 * unit_digit2\n\n    # Return the result\n    return product", "98": "function count_uppercase_vowels_in_even_indices(input_string):\n    # Create a list of uppercase vowels\n    create a list named \"uppercase_vowels\" with elements 'A', 'E', 'I', 'O', 'U'\n\n    # Initialize a counter for uppercase vowels\n    create a variable named \"count\" and set it to 0\n\n    # Loop through each character in the input string\n    for each index in range from 0 to length of input_string:\n        # Check if the index is even\n        if index modulo 2 equals 0:\n            # Check if the character is an uppercase vowel\n            if input_string at index is in \"uppercase_vowels\":\n                # If it is, increment the counter\n                increment \"count\" by 1\n\n    # Return the final count\n    return \"count\"", "99": "function closest_integer(input_string):\n    # Convert the input string to a float\n    convert input_string to a float and store it in a variable named \"value\"\n\n    # Get the integer part of the value\n    get the integer part of value and store it in a variable named \"integer_part\"\n\n    # Get the fractional part of the value\n    get the fractional part of value and store it in a variable named \"fractional_part\"\n\n    # If the fractional part is greater than or equal to 0.5, add 1 to the integer part\n    if fractional_part is greater than or equal to 0.5:\n        add 1 to integer_part\n\n    # If the value is negative, negate the integer part\n    if value is negative:\n        negate integer_part\n\n    # Return the integer part\n    return integer_part", "100": "function make_a_pile(n):\n    # Create an empty list to store the number of stones in each level\n    create an empty list named \"stones_in_each_level\"\n\n    # Loop through each level from 1 to n\n    for each level from 1 to n:\n        # If the current level is odd\n        if level is odd:\n            # The number of stones in this level is the next odd number\n            add the next odd number to \"stones_in_each_level\"\n        else:\n            # The number of stones in this level is the next even number\n            add the next even number to \"stones_in_each_level\"\n\n    # Return the list of stones in each level\n    return stones_in_each_level", "101": "function split_string_into_words(input_string):\n    # Create an empty list to store the words\n    create an empty list named \"words\"\n\n    # Split the input string into words\n    split input_string into words at commas or spaces and store them in \"words\"\n\n    # Return the list of words\n    return \"words\"", "102": "function choose_num(x, y):\n    # Check if x and y are positive numbers\n    if x and y are not positive numbers:\n        return \"Error: Both x and y must be positive numbers\"\n\n    # Initialize a variable to store the biggest even number\n    biggest_even_number = -1\n\n    # Loop through each number in the range [x, y]\n    for each number in range from x to y:\n        # Check if the number is even\n        if number is even:\n            # If it's even, check if it's bigger than the biggest even number we've seen so far\n            if number is bigger than biggest_even_number:\n                # If it's bigger, update biggest_even_number\n                biggest_even_number = number\n\n    # Return the biggest even number we've found\n    return biggest_even_number", "103": "function rounded_average_binary(n, m):\n    # Check if n is greater than m\n    if n > m:\n        # If so, return -1\n        return -1\n    else:\n        # Calculate the sum of all integers from n through m\n        sum = 0\n        for i in range(n, m+1):\n            sum = sum + i\n\n        # Calculate the average of these integers, rounding to the nearest integer\n        average = round(sum / (m - n + 1))\n\n        # Convert the average to binary\n        binary = bin(average)\n\n        # Return the binary representation\n        return binary\n\nThis pseudocode defines a function `rounded_average_binary` that takes two integers `n` and `m` as input. If `n` is greater than `m`, it returns `-1`. Otherwise, it calculates the sum of all integers from `n` through `m`, calculates the average of these integers, rounds it to the nearest integer, converts this average to binary, and returns the binary representation.", "104": "function unique_digits(input_list):\n    # Create an empty list to store the unique digits\n    create an empty list named \"unique_digits_list\"\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Convert the number to a string to easily check each digit\n        convert number to a string named \"number_string\"\n\n        # Create a flag to track if the number has any even digits\n        create a boolean variable named \"has_even_digit\" and set it to False\n\n        # Loop through each digit in the number\n        for each digit in number_string:\n            # Check if the digit is even\n            if digit is even:\n                # If it is, set the flag to True and break the loop\n                set \"has_even_digit\" to True\n                break\n\n        # If the number doesn't have any even digits, add it to the list\n        if \"has_even_digit\" is False:\n            add number to \"unique_digits_list\"\n\n    # Sort the list in increasing order\n    sort \"unique_digits_list\" in increasing order\n\n    # Return the list of unique digits\n    return \"unique_digits_list\"", "105": "function sort_and_replace(input_array):\n    # Create an empty list to store the sorted and replaced numbers\n    create an empty list named \"sorted_and_replaced\"\n\n    # Create a dictionary to map numbers to their names\n    create a dictionary named \"number_to_name\" with keys 1 to 9 and values \"One\" to \"Nine\"\n\n    # Loop through each number in the input array\n    for each number in input_array:\n        # Check if the number is between 1 and 9 inclusive\n        if number is between 1 and 9 inclusive:\n            # Add the number to the sorted_and_replaced list\n            add number to sorted_and_replaced\n\n    # Sort the sorted_and_replaced list in descending order\n    sort sorted_and_replaced in descending order\n\n    # Loop through each number in the sorted_and_replaced list\n    for each number in sorted_and_replaced:\n        # Replace the number with its corresponding name from the dictionary\n        replace number with number_to_name[number] in sorted_and_replaced\n\n    # Return the sorted_and_replaced list\n    return sorted_and_replaced", "106": "function f(n):\n    # Create an empty list to store the results\n    create an empty list named \"result\"\n\n    # Loop through each number from 1 to n\n    for i from 1 to n:\n        # Check if the number is even\n        if i is even:\n            # If it is, calculate the factorial of i and add it to the result list\n            calculate the factorial of i (let's call it \"factorial\")\n            add factorial to \"result\"\n        else:\n            # If it's not, calculate the sum of numbers from 1 to i and add it to the result list\n            calculate the sum of numbers from 1 to i (let's call it \"sum\")\n            add sum to \"result\"\n\n    # Return the result list\n    return \"result\"", "107": "function count_even_odd_palindromes(n):\n    # Initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n\n    # Loop through all numbers from 1 to n\n    for i from 1 to n:\n        # Check if the number is a palindrome\n        if i is a palindrome:\n            # If it is, check if it's even or odd\n            if i is even:\n                # If it's even, increment the even counter\n                increment even_count by 1\n            else:\n                # If it's odd, increment the odd counter\n                increment odd_count by 1\n\n    # Return the counts as a tuple\n    return (even_count, odd_count)\n\n# Helper function to check if a number is a palindrome\nfunction is_palindrome(num):\n    # Convert the number to a string\n    str_num = convert num to string\n\n    # Check if the string is the same forwards and backwards\n    if str_num is the same forwards and backwards:\n        return True\n    else:\n        return False", "108": "function count_nums(input_array):\n    # Initialize a counter to keep track of the numbers with sum of digits > 0\n    initialize a variable named \"count\" to 0\n\n    # Loop through each number in the input array\n    for each number in input_array:\n        # Calculate the sum of the digits of the number\n        initialize a variable named \"digit_sum\" to 0\n        convert the number to a string\n        for each character in the string:\n            if the character is a digit:\n                convert the character back to an integer\n                add the integer to \"digit_sum\"\n\n        # Check if the sum of the digits is greater than 0\n        if \"digit_sum\" is greater than 0:\n            # If it is, increment the counter\n            increment \"count\" by 1\n\n    # Return the counter\n    return \"count\"", "109": "function can_sort_by_right_shift(input_array):\n    # If the array is empty, return True\n    if input_array is empty:\n        return True\n\n    # Initialize a variable to keep track of the maximum value seen so far\n    initialize a variable named \"max_seen\" to the first element of the array\n\n    # Loop through each element in the array\n    for each element in input_array:\n        # If the current element is less than the maximum seen so far, return False\n        if element is less than max_seen:\n            return False\n        # Otherwise, update the maximum seen so far\n        else:\n            update max_seen to the maximum of max_seen and element\n\n    # If we've checked all elements and found no elements less than the maximum seen so far, return True\n    return True", "110": "function exchange_elements(list1, list2):\n    # Initialize counters for even and odd numbers in list1 and list2\n    initialize counter1 to 0\n    initialize counter2 to 0\n\n    # Loop through each number in list1\n    for each number in list1:\n        # If the number is even, increment counter1\n        if number is even:\n            increment counter1 by 1\n        # If the number is odd, increment counter2\n        else:\n            increment counter2 by 1\n\n    # Loop through each number in list2\n    for each number in list2:\n        # If the number is even, increment counter1\n        if number is even:\n            increment counter1 by 1\n        # If the number is odd, increment counter2\n        else:\n            increment counter2 by 1\n\n    # If counter1 is greater than counter2, it is possible to make all elements of list1 even\n    if counter1 is greater than counter2:\n        return \"YES\"\n    # If counter1 is less than or equal to counter2, it is not possible to make all elements of list1 even\n    else:\n        return \"NO\"", "111": "function histogram(input_string):\n    # Create an empty dictionary to keep track of the count of each character\n    create an empty dictionary named \"char_count\"\n\n    # Split the input string into a list of words\n    split input_string into a list of words\n\n    # Loop through each word in the list\n    for each word in the list:\n        # Check if the word is already in the dictionary\n        if word is already in \"char_count\":\n            # If it is, increment its count\n            increment the count of word in \"char_count\"\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            add word to \"char_count\" with a count of 1\n\n    # Find the maximum count in the dictionary\n    find the maximum count in \"char_count\"\n\n    # Create an empty dictionary to store the characters with the maximum count\n    create an empty dictionary named \"max_count_chars\"\n\n    # Loop through each key-value pair in the dictionary\n    for each key-value pair in \"char_count\":\n        # Check if the value of the pair is equal to the maximum count\n        if the value of the pair is equal to the maximum count:\n            # If it is, add the key-value pair to the \"max_count_chars\" dictionary\n            add the key-value pair to \"max_count_chars\"\n\n    # Return the \"max_count_chars\" dictionary\n    return \"max_count_chars\"", "112": "function reverse_delete_and_check_palindrome(input_string, characters_to_delete):\n    # Create an empty string to store the result\n    create an empty string named \"result_string\"\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # Check if the character is in the characters_to_delete string\n        if character is not in characters_to_delete:\n            # If it's not, add it to the result string\n            add character to \"result_string\"\n\n    # Check if the result string is a palindrome\n    if \"result_string\" is a palindrome:\n        # If it is, return the result string and True\n        return (\"result_string\", True)\n    else:\n        # If it's not, return the result string and False\n        return (\"result_string\", False)", "113": "function count_odd_elements(input_list):\n    # Create an empty list to store the counts of odd elements in each string\n    create an empty list named \"counts\"\n\n    # Loop through each string in the input list\n    for each string in input_list:\n        # Initialize a counter for the odd elements in the current string\n        set a counter to 0\n\n        # Loop through each character in the current string\n        for each character in string:\n            # If the character is an odd digit, increment the counter\n            if character is an odd digit:\n                increment the counter\n\n        # Add the counter to the list of counts\n        add the counter to \"counts\"\n\n    # Return the list of counts\n    return \"counts\"", "114": "function min_subarray_sum(input_array):\n    # Initialize the minimum sum to be the maximum possible value\n    initialize minimum_sum to be the maximum possible integer value\n\n    # Loop through each element in the input array\n    for each element in input_array:\n        # If the current element is less than the minimum sum, update the minimum sum\n        if element is less than minimum_sum:\n            update minimum_sum to be element\n\n    # Return the minimum sum\n    return minimum_sum", "115": "function max_fill(grid, capacity):\n    # Initialize the count of buckets to 0\n    count_buckets = 0\n\n    # Loop through each row in the grid\n    for each row in grid:\n        # Loop through each cell in the row\n        for each cell in row:\n            # If the cell is filled with water\n            if cell is 1:\n                # Increase the count of buckets by the capacity\n                count_buckets += capacity\n\n    # Return the count of buckets\n    return count_buckets", "116": "function sort_array(input_array):\n    # Create an empty list to store the binary representation of each number\n    create an empty list named \"binary_representations\"\n\n    # Loop through each number in the input array\n    for each number in input_array:\n        # Convert the number to binary and count the number of ones\n        convert number to binary and count the number of ones\n\n        # Add the binary representation and count of ones to the list\n        add the binary representation and count of ones to \"binary_representations\"\n\n    # Sort the list based on the count of ones and decimal value\n    sort \"binary_representations\" based on the count of ones and decimal value\n\n    # Create an empty list to store the sorted numbers\n    create an empty list named \"sorted_numbers\"\n\n    # Loop through each item in the sorted list\n    for each item in \"binary_representations\":\n        # Extract the decimal value from the item and add it to the sorted numbers list\n        extract the decimal value from the item and add it to \"sorted_numbers\"\n\n    # Return the sorted numbers list\n    return \"sorted_numbers\"", "117": "function select_words_with_n_consonants(input_string, n):\n    # Create an empty list to store the words with n consonants\n    create an empty list named \"words_with_n_consonants\"\n\n    # Define a helper function to count consonants in a word\n    define a function named \"count_consonants\" that takes a word as input:\n        create a variable named \"consonant_count\" and set it to 0\n        loop through each character in the word:\n            if the character is a consonant (not a vowel and not a space):\n                increment \"consonant_count\" by 1\n        return \"consonant_count\"\n\n    # Split the input string into words\n    split the input_string into words using the space character as the delimiter\n\n    # Loop through each word in the list of words\n    for each word in the list of words:\n        # If the word contains exactly n consonants, add it to the list\n        if the count of consonants in the word is equal to n:\n            add the word to the list \"words_with_n_consonants\"\n\n    # Return the list of words with n consonants\n    return \"words_with_n_consonants\"", "118": "function get_closest_vowel(input_word):\n    # Create a list of vowels\n    create a list named \"vowels\" with elements \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"\n\n    # Create an empty string to store the result\n    create an empty string named \"result\"\n\n    # Loop through each character in the input word from right to left\n    for each character in input_word from right to left:\n        # Check if the character is a vowel\n        if character is in \"vowels\":\n            # If it is, add it to the result string\n            add character to \"result\"\n            # Return the result string\n            return \"result\"\n\n    # If we've checked all characters and found no vowels, return an empty string\n    return \"\"", "119": "function match_parentheses(input_list):\n    # Initialize an empty string to store the concatenated string\n    create an empty string named \"concatenated_string\"\n\n    # Loop through each string in the input list\n    for each string in input_list:\n        # Concatenate the current string to the end of the concatenated string\n        concatenated_string = concatenated_string + string\n\n    # Initialize a counter to keep track of the balance of parentheses\n    create a variable named \"balance\" and set it to 0\n\n    # Loop through each character in the concatenated string\n    for each character in concatenated_string:\n        # If the character is an open parenthesis, increment the balance\n        if character is '(':\n            balance = balance + 1\n        # If the character is a close parenthesis, decrement the balance\n        else if character is ')':\n            balance = balance - 1\n\n        # If the balance ever goes negative, it means there's an unbalanced close parenthesis\n        if balance is less than 0:\n            return 'No'\n\n    # If the balance is 0 at the end, it means all parentheses are balanced\n    if balance is 0:\n        return 'Yes'\n    else:\n        return 'No'", "120": "function find_maximum_k_numbers(input_array, k):\n    # Check if k is greater than the length of the array\n    if k > length of input_array:\n        # If so, return an error message\n        return \"Error: k is greater than the length of the array\"\n\n    # Create an empty list to store the maximum k numbers\n    create an empty list named \"max_numbers\"\n\n    # Loop through the input array\n    for each number in input_array:\n        # If the list of maximum numbers is not full\n        if length of max_numbers < k:\n            # Add the number to the list\n            add number to max_numbers\n        else:\n            # If the list is full\n            # Check if the number is greater than the smallest number in the list\n            if number > smallest number in max_numbers:\n                # If so, remove the smallest number and add the new number\n                remove smallest number from max_numbers\n                add number to max_numbers\n\n    # Sort the list of maximum numbers\n    sort max_numbers in ascending order\n\n    # Return the list of maximum numbers\n    return max_numbers", "121": "function sum_odd_elements_in_even_positions(input_list):\n    # Initialize a variable to keep track of the sum\n    initialize a variable named \"sum\" to 0\n\n    # Loop through each element in the input list\n    for each index in range(0, length of input_list):\n        # Check if the index is even\n        if index is even:\n            # Check if the element at this index is odd\n            if element at index is odd:\n                # If it is, add it to the sum\n                add element at index to \"sum\"\n\n    # Return the sum\n    return \"sum\"", "122": "function sum_elements(array, k):\n    # Initialize a variable to store the sum\n    initialize a variable named \"sum\" to 0\n\n    # Loop through the first k elements of the array\n    for i from 0 to k-1:\n        # If the number of digits in the current element is less than or equal to 2\n        if the number of digits in array[i] is less than or equal to 2:\n            # Add the current element to the sum\n            add array[i] to \"sum\"\n\n    # Return the sum\n    return \"sum\"", "123": "function get_odd_collatz(n):\n    # Create an empty list to store the odd numbers in the Collatz sequence\n    create an empty list named \"odd_numbers\"\n\n    # While n is not 1, continue the Collatz sequence\n    while n is not 1:\n        # If n is odd, add it to the list of odd numbers\n        if n is odd:\n            add n to \"odd_numbers\"\n\n        # If n is even, divide it by 2\n        if n is even:\n            n = n / 2\n        # If n is odd, multiply it by 3 and add 1\n        else:\n            n = 3 * n + 1\n\n    # Add 1 to the list of odd numbers, as it's the last number in the sequence\n    add 1 to \"odd_numbers\"\n\n    # Sort the list of odd numbers in increasing order\n    sort \"odd_numbers\" in increasing order\n\n    # Return the list of odd numbers\n    return \"odd_numbers\"", "124": "function validate_date(date_string):\n    # Check if the date string is not empty\n    if date_string is empty:\n        return False\n\n    # Split the date string into month, day, and year\n    split date_string into month, day, and year using \"-\" as the delimiter\n\n    # Check if the month is valid\n    if month is less than 1 or greater than 12:\n        return False\n\n    # Check if the day is valid for the given month\n    if month is 1, 3, 5, 7, 8, 10, 12:\n        if day is less than 1 or greater than 31:\n            return False\n    else if month is 4, 6, 9, 11:\n        if day is less than 1 or greater than 30:\n            return False\n    else if month is 2:\n        if day is less than 1 or greater than 29:\n            return False\n\n    # Check if the date is in the correct format\n    if date_string does not match the pattern \"mm-dd-yyyy\":\n        return False\n\n    # If all checks pass, return True\n    return True", "125": "function split_words(input_string):\n    # Check if the string contains whitespace\n    if there is a whitespace in input_string:\n        # If it does, split the string on whitespace and return the resulting list\n        return split input_string on whitespace\n    else:\n        # Check if the string contains a comma\n        if there is a comma in input_string:\n            # If it does, split the string on comma and return the resulting list\n            return split input_string on comma\n        else:\n            # If the string doesn't contain either, count the number of lower-case letters with odd order in the alphabet\n            count the number of lower-case letters with odd order in the alphabet in input_string\n            return the count", "126": "function is_sorted(input_list):\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Check if the number is greater than the next number in the list\n        if number is greater than the next number in the list:\n            # If it is, the list is not sorted in ascending order, so return False\n            return False\n\n    # If we've checked all numbers and found no out-of-order pairs, return True\n    return True", "127": "function intersection(interval1, interval2):\n    # Check if the intervals intersect\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n\n    # Calculate the intersection of the intervals\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n\n    # Check if the length of the intersection is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i from 2 to sqrt(intersection_length):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"", "128": "function product_of_signs_and_magnitudes(input_array):\n    # Check if the array is empty\n    if input_array is empty:\n        # If it is, return None\n        return None\n\n    # Initialize variables to keep track of the product of signs and sum of magnitudes\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    # Loop through each number in the array\n    for each number in input_array:\n        # Update the product of signs\n        if number is positive:\n            product_of_signs *= 1\n        elif number is negative:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n\n        # Update the sum of magnitudes\n        sum_of_magnitudes += absolute value of number\n\n    # Return the product of signs and sum of magnitudes\n    return product_of_signs * sum_of_magnitudes", "129": "function minPath(grid, k):\n    # Initialize a variable to store the minimum path\n    let minPath be an empty list\n\n    # Initialize a variable to store the current path\n    let currentPath be an empty list\n\n    # Initialize a variable to store the current sum\n    let currentSum be 0\n\n    # Initialize a variable to store the current cell\n    let currentCell be the first cell in the grid\n\n    # Initialize a variable to store the current length of the path\n    let currentLength be 0\n\n    # While the current length of the path is less than k\n    while currentLength < k:\n        # Add the value of the current cell to the current path and the current sum\n        add the value of the current cell to currentPath and currentSum\n\n        # If the current length of the path is equal to k\n        if currentLength is equal to k:\n            # If the current path is less than the minimum path or the minimum path is empty\n            if currentPath is less than minPath or minPath is empty:\n                # Update the minimum path\n                minPath = currentPath\n\n        # Otherwise, if the current length of the path is less than k\n        else:\n            # For each neighbor of the current cell\n            for each neighbor of the current cell:\n                # Update the current cell to the neighbor\n                currentCell = neighbor\n\n                # Recursively call the minPath function with the updated current cell and the updated path and sum\n                minPath(grid, k, currentCell, currentPath, currentSum)\n\n                # After the recursive call, reset the current cell to the previous cell\n                currentCell = previous cell\n\n                # Remove the last value from the current path and the current sum\n                remove the last value from currentPath and currentSum\n\n    # Return the minimum path\n    return minPath", "130": "function tribonacci(n):\n    # Create a list to store the first n + 1 numbers of the Tribonacci sequence\n    create a list named \"tribonacci_sequence\"\n\n    # Add the first three numbers of the sequence to the list\n    add 1 to \"tribonacci_sequence\"\n    add 3 to \"tribonacci_sequence\"\n    add 2 to \"tribonacci_sequence\"\n\n    # Loop through the remaining numbers of the sequence\n    for i from 3 to n:\n        # If the current number is even\n        if i is even:\n            # Calculate the next number in the sequence\n            next_number = 1 + (i / 2)\n        else:\n            # If the current number is odd\n            # Calculate the next number in the sequence\n            next_number = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i + 1]\n\n        # Add the calculated next number to the sequence\n        add next_number to \"tribonacci_sequence\"\n\n    # Return the list of the first n + 1 numbers of the Tribonacci sequence\n    return tribonacci_sequence", "131": "function product_of_odd_digits(input_number):\n    # Convert the input number to a string to easily iterate over its digits\n    convert input_number to a string and assign it to \"number_string\"\n\n    # Initialize a variable to keep track of the product of the odd digits\n    initialize a variable named \"product\" and set it to 1\n\n    # Initialize a variable to keep track of whether we've found any odd digits\n    initialize a variable named \"found_odd_digit\" and set it to False\n\n    # Loop through each digit in the number\n    for each digit in number_string:\n        # Convert the digit back to an integer\n        convert digit to an integer and assign it to \"digit_int\"\n\n        # Check if the digit is odd\n        if digit_int is odd:\n            # If it is, update the product and set found_odd_digit to True\n            multiply product by digit_int\n            set found_odd_digit to True\n\n    # If we found no odd digits, return 0\n    if found_odd_digit is False:\n        return 0\n    else:\n        # Otherwise, return the product\n        return product", "132": "function is_nested(input_string):\n    # Create a stack to keep track of brackets\n    create an empty stack named \"bracket_stack\"\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # If the character is an opening bracket, push it onto the stack\n        if character is '[':\n            push character onto \"bracket_stack\"\n        # If the character is a closing bracket\n        else if character is ']':\n            # If the stack is empty, return False\n            if \"bracket_stack\" is empty:\n                return False\n            # If the stack is not empty, pop an element from the stack\n            else:\n                pop an element from \"bracket_stack\"\n\n    # If the stack is empty, return False\n    if \"bracket_stack\" is empty:\n        return False\n    # If the stack is not empty, return True\n    else:\n        return True", "133": "function sum_squares(input_list):\n    # Initialize a variable to keep track of the sum\n    initialize a variable named \"sum\" to 0\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Round each number to the upper int(Ceiling)\n        round number to the upper int(Ceiling)\n\n        # Square the number\n        square the number\n\n        # Add the squared number to the sum\n        add the squared number to \"sum\"\n\n    # Return the sum\n    return \"sum\"", "134": "function check_if_last_char_is_a_letter(input_string):\n    # If the string is empty, return False\n    if input_string is empty:\n        return False\n\n    # Get the last character of the string\n    last_character = get the last character of input_string\n\n    # If the last character is not a letter, return False\n    if last_character is not a letter:\n        return False\n\n    # If the string has more than one character, get the second to last character\n    if input_string has more than one character:\n        second_to_last_character = get the second to last character of input_string\n\n        # If the second to last character is a space, return False\n        if second_to_last_character is a space:\n            return False\n\n    # If we've made it this far, the last character is a letter and is not part of a word, so return True\n    return True", "135": "function find_largest_index(input_array):\n    # Initialize largest_index to -1\n    set largest_index to -1\n\n    # Loop through each element in the input array\n    for each element in input_array:\n        # Check if the current element is not greater than or equal to the previous element\n        if element is not greater than or equal to the previous element:\n            # If it is, update largest_index to the current index\n            set largest_index to the current index\n\n    # Return the largest_index\n    return largest_index", "136": "function find_largest_smallest_integers(input_list):\n    # Initialize variables to keep track of the largest negative integer and smallest positive integer\n    largest_negative_integer = None\n    smallest_positive_integer = None\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Check if the number is negative\n        if number < 0:\n            # If it's negative, and we haven't found a larger negative number yet, or we have but this one is larger\n            if largest_negative_integer is None or number > largest_negative_integer:\n                # Update our record of the largest negative number\n                largest_negative_integer = number\n\n        # Check if the number is positive\n        else if number > 0:\n            # If it's positive, and we haven't found a smaller positive number yet, or we have but this one is smaller\n            if smallest_positive_integer is None or number < smallest_positive_integer:\n                # Update our record of the smallest positive number\n                smallest_positive_integer = number\n\n    # Return the largest negative and smallest positive numbers, or None if we didn't find any\n    return (largest_negative_integer, smallest_positive_integer)", "137": "function compare_one(a, b):\n    # Check if a and b are of the same type\n    if type(a) is not type(b):\n        return None\n\n    # Check if a and b are integers\n    if type(a) is int:\n        # If a is greater than b, return a, else return b\n        if a > b:\n            return a\n        else:\n            return b\n\n    # Check if a and b are floats\n    if type(a) is float:\n        # If a is greater than b, return a, else return b\n        if a > b:\n            return a\n        else:\n            return b\n\n    # Check if a and b are strings\n    if type(a) is str:\n        # Replace ',' with '.' in a and b\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n\n        # Convert a and b to floats\n        a = float(a)\n        b = float(b)\n\n        # If a is greater than b, return a, else return b\n        if a > b:\n            return a\n        else:\n            return b\n\n    # If a and b are not integers, floats, or strings, return None\n    return None", "138": "function is_equal_to_sum_even(n):\n    # Check if the number is even\n    if n is not even:\n        return False\n\n    # Initialize a counter to keep track of the number of even numbers we've found\n    initialize a counter to 0\n\n    # Loop through all numbers from 2 to n\n    for each number from 2 to n:\n        # Check if the number is even\n        if number is even:\n            # If it is, increment the counter\n            increment the counter by 1\n\n    # Check if the counter is equal to 4\n    if counter is equal to 4:\n        # If it is, return True\n        return True\n    else:\n        # If it's not, return False\n        return False", "139": "function special_factorial(n):\n    # Check if n is less than or equal to 0\n    if n <= 0:\n        # If it is, return an error message\n        return \"Error: Input must be a positive integer.\"\n\n    # Initialize the result to 1\n    let result be 1\n\n    # Loop from n down to 1\n    for i from n down to 1:\n        # Multiply the result by i!\n        result = result * factorial(i)\n\n    # Return the result\n    return result\n\n# Helper function to calculate factorial\nfunction factorial(n):\n    # Check if n is less than or equal to 0\n    if n <= 0:\n        # If it is, return 1\n        return 1\n\n    # Initialize the result to 1\n    let result be 1\n\n    # Loop from n down to 1\n    for i from n down to 1:\n        # Multiply the result by i\n        result = result * i\n\n    # Return the result\n    return result", "140": "function fix_spaces(input_string):\n    # Create an empty string to store the result\n    create an empty string named \"result\"\n\n    # Create a flag to track whether we're in a sequence of spaces\n    create a boolean variable named \"in_sequence\" and set it to False\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # If the character is a space\n        if character is a space:\n            # If we're not in a sequence of spaces\n            if not in_sequence:\n                # Start a sequence of spaces\n                set in_sequence to True\n                # Add an underscore to the result\n                add an underscore to \"result\"\n            else:\n                # If we're already in a sequence of spaces\n                # Add a dash to the result\n                add a dash to \"result\"\n        else:\n            # If the character is not a space\n            # Stop the sequence of spaces\n            set in_sequence to False\n            # Add the character to the result\n            add character to \"result\"\n\n    # Return the result\n    return result", "141": "function file_name_check(file_name):\n    # Initialize counters for digits and dots\n    set digit_count to 0\n    set dot_count to 0\n\n    # Loop through each character in the file name\n    for each character in file_name:\n        # If the character is a digit, increment the digit count\n        if character is a digit:\n            increment digit_count by 1\n        # If the character is a dot, increment the dot count\n        else if character is a dot:\n            increment dot_count by 1\n\n    # If there are more than three digits or more than one dot, return 'No'\n    if digit_count > 3 or dot_count > 1:\n        return 'No'\n\n    # Split the file name into the substring before and after the dot\n    split file_name at the dot into substring_before_dot and substring_after_dot\n\n    # If the substring before the dot is empty or does not start with a letter, return 'No'\n    if substring_before_dot is empty or substring_before_dot does not start with a letter:\n        return 'No'\n\n    # If the substring after the dot is not one of ['txt', 'exe', 'dll'], return 'No'\n    if substring_after_dot is not one of ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # If all conditions are met, return 'Yes'\n    return 'Yes'", "142": "function sum_squares(input_list):\n    # Initialize a variable to keep track of the sum\n    initialize a variable named \"sum\" to 0\n\n    # Loop through each index and value in the input list\n    for each index, value in input_list:\n        # Check if the index is a multiple of 3\n        if index mod 3 is 0:\n            # If it is, square the value and add it to the sum\n            add value squared to \"sum\"\n        # Check if the index is a multiple of 4 but not a multiple of 3\n        else if index mod 4 is 0 and index mod 3 is not 0:\n            # If it is, cube the value and add it to the sum\n            add value cubed to \"sum\"\n        # If the index is not a multiple of 3 or 4, do nothing\n\n    # Return the sum\n    return \"sum\"", "143": "function words_in_sentence(sentence):\n    # Create an empty string to store the result\n    create an empty string named \"result\"\n\n    # Split the sentence into words\n    split sentence into words using space as delimiter\n\n    # Loop through each word in the sentence\n    for each word in words:\n        # Check if the length of the word is a prime number\n        if length of word is a prime number:\n            # If it is, add the word to the result string\n            add word to the end of \"result\"\n\n    # Return the result string\n    return \"result\"\n\nfunction is_prime(number):\n    # Check if the number is less than 2\n    if number is less than 2:\n        # If it is, return False\n        return False\n\n    # Loop from 2 to the square root of the number\n    for each number from 2 to the square root of number:\n        # Check if the number is divisible by the current number\n        if number is divisible by current number:\n            # If it is, return False\n            return False\n\n    # If we've checked all numbers and found no divisors, return True\n    return True", "144": "function simplify_fraction(fraction1, fraction2):\n    # Parse the fractions to get their numerators and denominators\n    parse fraction1 to get numerator1 and denominator1\n    parse fraction2 to get numerator2 and denominator2\n\n    # Multiply the numerators together and the denominators together\n    multiply numerator1 by numerator2\n    multiply denominator1 by denominator2\n\n    # Check if the result is a whole number\n    if the product of numerator1 and numerator2 is divisible by the product of denominator1 and denominator2:\n        # If it is, return True\n        return True\n    else:\n        # If it's not, return False\n        return False", "145": "function order_by_points(input_list):\n    # Create an empty list to store the sum of digits and their original index\n    create an empty list named \"sum_digits_list\"\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Calculate the sum of its digits\n        calculate the sum of the digits in number and store it in a variable named \"sum_digits\"\n\n        # Add the sum of digits and the original index of the number to the list\n        add a tuple of (sum_digits, original_index, number) to \"sum_digits_list\"\n\n    # Sort the list based on the sum of digits and the original index\n    sort \"sum_digits_list\" based on the first element of each tuple (sum_digits) and the second element of each tuple (original_index)\n\n    # Create an empty list to store the sorted numbers\n    create an empty list named \"sorted_list\"\n\n    # Loop through each tuple in the sorted list\n    for each tuple in \"sum_digits_list\":\n        # Add the number from the tuple to the sorted list\n        add the third element of the tuple to \"sorted_list\"\n\n    # Return the sorted list\n    return \"sorted_list\"", "146": "function special_filter(input_array):\n    # Initialize a counter to keep track of the number of elements that meet the criteria\n    initialize a counter to 0\n\n    # Loop through each number in the input array\n    for each number in input_array:\n        # Check if the number is greater than 10\n        if number is greater than 10:\n            # Convert the number to a string to easily access its first and last digits\n            convert number to a string\n\n            # Check if the first and last digits are odd\n            if the first character of the string is an odd number and the last character of the string is an odd number:\n                # If it is, increment the counter\n                increment the counter\n\n    # Return the counter\n    return counter", "147": "function get_max_triples(n):\n    # Create an empty list to store the values of a\n    create an empty list named \"a\"\n\n    # Loop through each i from 1 to n\n    for i from 1 to n:\n        # Calculate the value of a[i] and add it to the list\n        calculate a[i] as i * i - i + 1\n        add a[i] to \"a\"\n\n    # Create a variable to store the count of triples\n    create a variable named \"count\" and initialize it to 0\n\n    # Loop through each i from 1 to n\n    for i from 1 to n:\n        # Loop through each j from i+1 to n\n        for j from i+1 to n:\n            # Loop through each k from j+1 to n\n            for k from j+1 to n:\n                # Check if a[i] + a[j] + a[k] is a multiple of 3\n                if (a[i] + a[j] + a[k]) mod 3 is 0:\n                    # If it is, increment the count\n                    increment \"count\" by 1\n\n    # Return the count\n    return count", "148": "function find_planets_between(planet1, planet2):\n    # Define the list of planets in order from the closest to the sun\n    create a list named \"planets\" with the elements \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n\n    # Check if planet1 and planet2 are valid planet names\n    if planet1 is not in planets or planet2 is not in planets:\n        # If not, return an empty tuple\n        return ()\n\n    # Find the indices of planet1 and planet2 in the list of planets\n    find the index of planet1 in \"planets\" and call it \"index1\"\n    find the index of planet2 in \"planets\" and call it \"index2\"\n\n    # Create a list of planets whose orbits are located between the orbits of planet1 and planet2\n    create an empty list named \"planets_between\"\n    for each planet from \"planets\" at index \"index1\" to \"index2\":\n        add planet to \"planets_between\"\n\n    # Return the list of planets\n    return \"planets_between\"", "149": "function sorted_list_sum(input_list):\n    # Create an empty list to store the strings with even lengths\n    create an empty list named \"even_length_strings\"\n\n    # Loop through each string in the input list\n    for each string in input_list:\n        # Check if the length of the string is even\n        if length of string is even:\n            # If it is, add it to our list of even length strings\n            add string to \"even_length_strings\"\n\n    # Sort the list of even length strings by length and then alphabetically\n    sort \"even_length_strings\" by length and then alphabetically\n\n    # Return the sorted list of even length strings\n    return \"even_length_strings\"", "150": "function x_or_y(n, x, y):\n    # Create a function to check if a number is prime\n    function is_prime(num):\n        if num is less than 2:\n            return False\n        for each number from 2 to num - 1:\n            if num is divisible by number:\n                return False\n        return True\n\n    # Check if n is prime\n    if is_prime(n):\n        # If it is, return x\n        return x\n    else:\n        # If it's not, return y\n        return y", "151": "function double_the_difference(input_list):\n    # Initialize a variable to keep track of the sum\n    initialize a variable named \"sum\" to 0\n\n    # Loop through each number in the input list\n    for each number in input_list:\n        # Check if the number is an integer and is positive\n        if number is an integer and number is positive:\n            # Check if the number is odd\n            if number is odd:\n                # If it is, square it and add it to the sum\n                add the square of number to \"sum\"\n\n    # Return the sum\n    return \"sum\"", "152": "function compare_scores_and_guesses(game_scores, guesses):\n    # Create an empty list to store the differences\n    create an empty list named \"differences\"\n\n    # Loop through each index in the game scores and guesses\n    for each index in the range of the length of game_scores:\n        # Calculate the difference between the game score and the guess\n        calculate the difference between game_scores[index] and guesses[index]\n\n        # Add the absolute value of the difference to the differences list\n        add the absolute value of the difference to the differences list\n\n    # Return the differences list\n    return the differences list", "153": "function find_strongest_extension(class_name, extensions):\n    # Initialize the strongest extension and its strength to be None and 0\n    strongest_extension = None\n    strongest_strength = 0\n\n    # Loop through each extension\n    for each extension in extensions:\n        # Calculate the strength of the extension\n        strength = count_uppercase_letters(extension) - count_lowercase_letters(extension)\n\n        # If this extension is stronger than the current strongest extension\n        if strength > strongest_strength:\n            # Update the strongest extension and its strength\n            strongest_extension = extension\n            strongest_strength = strength\n\n    # Return the strongest extension in the format 'ClassName.StrongestExtensionName'\n    return class_name + '.' + strongest_extension\n\nfunction count_uppercase_letters(string):\n    # Initialize a counter to keep track of the number of uppercase letters\n    counter = 0\n\n    # Loop through each character in the string\n    for each character in string:\n        # If the character is an uppercase letter, increment the counter\n        if character is an uppercase letter:\n            counter = counter + 1\n\n    # Return the counter\n    return counter\n\nfunction count_lowercase_letters(string):\n    # Initialize a counter to keep track of the number of lowercase letters\n    counter = 0\n\n    # Loop through each character in the string\n    for each character in string:\n        # If the character is a lowercase letter, increment the counter\n        if character is a lowercase letter:\n            counter = counter + 1\n\n    # Return the counter\n    return counter", "154": "function check_cyclic_pattern(word1, word2):\n    # Check if word2 is a substring of word1\n    if word2 is a substring of word1:\n        return True\n\n    # If not, check if any rotation of word2 is a substring of word1\n    for each rotation of word2:\n        if the rotation is a substring of word1:\n            return True\n\n    # If no rotation of word2 is a substring of word1, return False\n    return False", "155": "function count_even_odd_digits(input_number):\n    # Convert the input number to a string to easily iterate over its digits\n    convert input_number to a string and assign it to \"number_string\"\n\n    # Initialize counters for even and odd digits\n    initialize a counter for even digits and assign it to \"even_count\"\n    initialize a counter for odd digits and assign it to \"odd_count\"\n\n    # Loop through each digit in the number\n    for each digit in number_string:\n        # Convert the digit back to an integer\n        convert digit back to an integer and assign it to \"digit_int\"\n\n        # Check if the digit is even or odd\n        if digit_int is divisible by 2:\n            # If it's even, increment the even counter\n            increment \"even_count\" by 1\n        else:\n            # If it's odd, increment the odd counter\n            increment \"odd_count\" by 1\n\n    # Return the counts as a tuple\n    return (even_count, odd_count)", "156": "function convert_integer_to_roman(input_number):\n    # Create a dictionary to map integers to their roman numeral equivalents\n    create a dictionary named \"roman_numerals\" with keys as integers from 1 to 1000 and values as their roman numeral equivalents\n\n    # Initialize an empty string to store the result\n    create a string named \"result\" and initialize it as an empty string\n\n    # Loop through the keys in the dictionary in descending order\n    for each key in the keys of \"roman_numerals\" in descending order:\n        # While the input number is greater than or equal to the current key\n        while input_number is greater than or equal to key:\n            # Subtract the key from the input number\n            subtract key from input_number\n\n            # Append the corresponding roman numeral to the result\n            append the value of \"roman_numerals\" at key to \"result\"\n\n    # Return the result\n    return result", "157": "function is_right_angled_triangle(a, b, c):\n    # Check if a, b, c are positive numbers\n    if a, b, c are not positive numbers:\n        return False\n\n    # Check if a, b, c form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n\n    # Check if a^2 + b^2 = c^2 or a^2 + c^2 = b^2 or b^2 + c^2 = a^2\n    if a^2 + b^2 = c^2 or a^2 + c^2 = b^2 or b^2 + c^2 = a^2:\n        return True\n    else:\n        return False", "158": "function find_max_unique_characters(list_of_words):\n    # Create an empty dictionary to keep track of unique characters in each word\n    create an empty dictionary named \"unique_characters\"\n\n    # Loop through each word in the list\n    for each word in list_of_words:\n        # Create a set of unique characters in the word\n        create a set named \"unique_chars\" and add all unique characters in word to it\n\n        # Add the number of unique characters in the word to the dictionary\n        add word as key and size of \"unique_chars\" as value to \"unique_characters\"\n\n    # Find the maximum number of unique characters\n    find the maximum value in \"unique_characters\" and assign it to \"max_unique_chars\"\n\n    # Loop through each word in the list\n    for each word in list_of_words:\n        # Check if the number of unique characters in the word is equal to the maximum\n        if size of \"unique_characters\" of word is equal to \"max_unique_chars\":\n            # If it is, add the word to a list of words with maximum unique characters\n            add word to a list named \"max_unique_words\"\n\n    # Sort the list of words with maximum unique characters in lexicographical order\n    sort \"max_unique_words\" in lexicographical order\n\n    # Return the first word in the sorted list\n    return the first word in \"max_unique_words\"", "159": "function eat_carrots(number, need, remaining):\n    # Check if there are enough remaining carrots to eat all the need\n    if remaining >= need:\n        # If yes, then eat all the need and return the total number of eaten carrots and the remaining carrots\n        return [number + need, remaining - need]\n    else:\n        # If no, then eat all the remaining carrots and return the total number of eaten carrots and the remaining carrots\n        return [number + remaining, 0]", "160": "function do_algebra(operator_list, operand_list):\n    # Initialize the result to the first operand\n    result = operand_list[0]\n\n    # Loop through each operator and operand in the lists\n    for i in range(len(operator_list)):\n        # Perform the operation indicated by the operator\n        if operator_list[i] == '+':\n            result += operand_list[i + 1]\n        elif operator_list[i] == '-':\n            result -= operand_list[i + 1]\n        elif operator_list[i] == '*':\n            result *= operand_list[i + 1]\n        elif operator_list[i] == '//':\n            result //= operand_list[i + 1]\n        elif operator_list[i] == '**':\n            result **= operand_list[i + 1]\n\n    # Return the final result\n    return result", "161": "function solve_string(input_string):\n    # Create an empty string to store the result\n    create an empty string named \"result\"\n\n    # Loop through each character in the input string\n    for each character in input_string:\n        # Check if the character is a letter\n        if character is a letter:\n            # If it is, reverse its case\n            if character is uppercase:\n                convert character to lowercase and add it to \"result\"\n            else:\n                convert character to uppercase and add it to \"result\"\n        else:\n            # If it's not a letter, just add it to \"result\"\n            add character to \"result\"\n\n    # If the input string contains no letters, reverse the string\n    if \"result\" is empty:\n        return reverse \"input_string\"\n    else:\n        return \"result\"\n\nThe pseudocode for the problem is as follows:\n\n1. Initialize an empty string \"result\".\n2. Loop through each character in the input string.\n3. If the character is a letter, reverse its case and add it to \"result\".\n4. If the character is not a letter, just add it to \"result\".\n5. If \"result\" is empty (i.e., the input string contains no letters), return the reversed input string.\n6. Otherwise, return \"result\".", "162": "function string_to_md5(input_string):\n    # Check if the input string is empty\n    if input_string is an empty string:\n        # If it is, return None\n        return None\n    else:\n        # If it's not, import the hashlib library\n        import the hashlib library\n\n        # Create a new md5 hash object\n        create a new md5 hash object named \"md5_hash\"\n\n        # Update the hash object with the input string\n        update \"md5_hash\" with the input string\n\n        # Get the hexadecimal representation of the hash\n        get the hexadecimal representation of \"md5_hash\" and store it in a variable named \"md5_hash_hex\"\n\n        # Return the hexadecimal representation\n        return \"md5_hash_hex\"", "163": "function generate_even_integers(a, b):\n    # Create an empty list to store the even integers\n    create an empty list named \"even_integers\"\n\n    # If a is greater than b, swap their values\n    if a > b:\n        swap a and b\n\n    # Loop through each integer from a to b (inclusive)\n    for each integer from a to b:\n        # Check if the integer is even\n        if integer is even:\n            # If it is, add it to the list of even integers\n            add integer to \"even_integers\"\n\n    # Return the list of even integers\n    return \"even_integers\"\n\n# Test the function\nprint(generate_even_integers(2, 8)) # Output: [2, 4, 6, 8]\nprint(generate_even_integers(8, 2)) # Output: [2, 4, 6, 8]\nprint(generate_even_integers(10, 14)) # Output: []"}